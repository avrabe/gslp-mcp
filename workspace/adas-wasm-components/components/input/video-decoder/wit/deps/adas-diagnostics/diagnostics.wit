/// ADAS Diagnostic Interfaces - Health monitoring and fault detection
package adas:diagnostics;

/// Health monitoring interface - standardized health reporting
interface health-monitoring {
    use adas:common-types/types.{
        health-status,
        test-result,
        timestamp
    };
    
    /// Component health report
    record health-report {
        component-id: string,
        overall-health: health-status,
        subsystem-health: list<subsystem-health>,
        last-diagnostic: option<diagnostic-result>,
        timestamp: timestamp,
    }
    
    record subsystem-health {
        subsystem-name: string,
        status: health-status,
        details: string,
    }
    
    record diagnostic-result {
        test-results: list<test-execution>,
        overall-score: f32,
        recommendations: list<string>,
        timestamp: timestamp,
    }
    
    record test-execution {
        test-name: string,
        test-result: test-result,
        details: string,
        execution-time-ms: f32,
    }
    
    /// Get current health status
    get-health: func() -> health-report;
    
    /// Run full diagnostic
    run-diagnostic: func() -> result<diagnostic-result, string>;
    
    /// Get last diagnostic result
    get-last-diagnostic: func() -> option<diagnostic-result>;
}

/// Performance monitoring interface - resource usage and metrics
interface performance-monitoring {
    use adas:common-types/types.{
        performance-metrics,
        timestamp
    };
    
    /// Extended performance metrics
    record extended-performance {
        base-metrics: performance-metrics,
        component-specific: list<metric>,
        resource-usage: resource-usage,
        timestamp: timestamp,
    }
    
    record metric {
        name: string,
        value: f64,
        unit: string,
        description: string,
    }
    
    record resource-usage {
        cpu-cores-used: f32,
        memory-allocated-mb: u32,
        memory-peak-mb: u32,
        disk-io-mb: f32,
        network-io-mb: f32,
        gpu-utilization: f32,
        gpu-memory-mb: u32,
    }
    
    /// Get current performance metrics
    get-performance: func() -> extended-performance;
    
    /// Get performance history
    get-performance-history: func(duration-seconds: u32) -> list<extended-performance>;
    
    /// Reset performance counters
    reset-counters: func();
}

/// Fault detection interface - error reporting and recovery
interface fault-detection {
    use adas:common-types/types.{timestamp};
    
    /// Fault report
    record fault-report {
        fault-id: string,
        severity: fault-severity,
        category: fault-category,
        description: string,
        component-id: string,
        timestamp: timestamp,
        recovery-actions: list<recovery-action>,
        context: fault-context,
    }
    
    enum fault-severity {
        info,
        warning,
        error,
        critical,
        catastrophic,
    }
    
    enum fault-category {
        hardware,
        software,
        communication,
        data-quality,
        performance,
        safety,
        security,
    }
    
    record recovery-action {
        action-type: recovery-type,
        description: string,
        automatic: bool,
        estimated-time-seconds: u32,
    }
    
    enum recovery-type {
        restart-component,
        reset-state,
        fallback-mode,
        degraded-operation,
        emergency-stop,
        manual-intervention,
    }
    
    record fault-context {
        operation-mode: string,
        inputs: list<string>,
        state-variables: list<state-variable>,
        recent-events: list<string>,
    }
    
    record state-variable {
        name: string,
        value: string,
        variable-type: string,
    }
    
    /// Report a fault
    report-fault: func(fault: fault-report);
    
    /// Get active faults
    get-active-faults: func() -> list<fault-report>;
    
    /// Get fault history
    get-fault-history: func(duration-seconds: u32) -> list<fault-report>;
    
    /// Acknowledge fault (mark as handled)
    acknowledge-fault: func(fault-id: string) -> result<_, string>;
    
    /// Trigger recovery action
    trigger-recovery: func(fault-id: string, action-type: recovery-type) -> result<_, string>;
}
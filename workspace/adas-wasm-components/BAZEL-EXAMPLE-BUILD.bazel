# Example Bazel BUILD file for camera-front component
# This demonstrates how the current Cargo-based component would be built with Bazel

load("@rules_rust//rust:defs.bzl", "rust_library", "rust_binary")
load("@rules_rust//wasm_bindgen:defs.bzl", "rust_wasm_bindgen")
load("@rules_rust//crate_universe:defs.bzl", "crate", "crates_vendor")
load("//bazel:wasm_component_rules.bzl", "wasm_component", "wit_bindings")
load("//bazel:metadata_rules.bzl", "embed_component_metadata")

package(default_visibility = ["//visibility:public"])

# Generate WIT bindings for this component
wit_bindings(
    name = "camera_front_wit_bindings",
    world = "//wit/components:sensor-component",
    wit_deps = [
        "//wit/interfaces:adas-common-types",
        "//wit/interfaces:adas-control",
        "//wit/interfaces:adas-data", 
        "//wit/interfaces:adas-diagnostics",
        "//wit/interfaces:adas-orchestration",
    ],
    out_dir = "src/bindings",
)

# Component metadata generation
embed_component_metadata(
    name = "camera_front_metadata",
    component_name = "adas-camera-front-ecu",
    version = "0.1.0",
    component_type = "sensor",
    safety_level = "ASIL-B",
    metadata_toml = "//metadata:camera-front-ecu.toml",
    git_commit = "$(GIT_COMMIT)",
    build_timestamp = "$(BUILD_TIMESTAMP)",
)

# Main component library
rust_library(
    name = "camera_front_lib",
    srcs = glob(["src/**/*.rs"]) + [":camera_front_wit_bindings"],
    edition = "2021",
    proc_macro_deps = [
        "@crates//:serde_derive",
    ],
    deps = [
        ":camera_front_metadata",
        "//component-metadata",
        "@crates//:wit-bindgen",
        "@crates//:serde",
        "@crates//:serde_json",
    ],
    crate_features = select({
        "//bazel/config:debug_build": ["debug_assertions"],
        "//bazel/config:release_build": ["optimized"],
        "//conditions:default": [],
    }),
    rustc_flags = select({
        "//bazel/config:release_build": [
            "-C", "opt-level=s",     # Optimize for size
            "-C", "lto=true",        # Link-time optimization
            "-C", "embed-bitcode=yes",
            "-C", "debuginfo=0",
        ],
        "//bazel/config:debug_build": [
            "-C", "opt-level=1",
            "-C", "debuginfo=2",
        ],
        "//conditions:default": [],
    }),
)

# Build the WASM module
rust_binary(
    name = "camera_front_wasm",
    srcs = [],
    edition = "2021",
    deps = [":camera_front_lib"],
    crate_type = "cdylib",
    target_triple = "wasm32-wasip2",
    rustc_flags = [
        "--cfg", "target_arch=\"wasm32\"",
        "--cfg", "target_os=\"wasi\"",
    ],
)

# Convert to WebAssembly Component
wasm_component(
    name = "adas_camera_front_ecu",
    wasm_binary = ":camera_front_wasm",
    wit_world = "//wit/components:sensor-component",
    component_type = "sensor",
    validate = True,
    optimize = select({
        "//bazel/config:release_build": True,
        "//conditions:default": False,
    }),
    # Real-time constraints from metadata
    timing_constraints = {
        "max_latency_ms": 33,  # 30 FPS
        "update_frequency_hz": 30,
    },
    # Component will be used in these compositions
    tags = ["sensor_layer", "adas_system", "feo_compatible"],
)

# Component tests
rust_test(
    name = "camera_front_test",
    crate = ":camera_front_lib",
    edition = "2021",
    data = [
        "//test_data:sample_images",
    ],
    env = {
        "RUST_BACKTRACE": "1",
        "TEST_COMPONENT": "camera_front",
    },
    size = "medium",
    tags = ["unit_test", "sensor_test"],
)

# Integration test with test harness
wasm_component_test(
    name = "camera_front_integration_test",
    component = ":adas_camera_front_ecu",
    test_harness = "//test/harness:sensor_test_harness",
    test_data = [
        "//test_data:driving_video_320x200.mp4",
    ],
    timeout = "long",
    tags = ["integration_test", "requires_wasm_runtime"],
)

# Filegroup for composition
filegroup(
    name = "camera_front_artifacts",
    srcs = [
        ":adas_camera_front_ecu",
        ":camera_front_metadata",
    ],
    visibility = ["//components/composed:__pkg__"],
)

# Generate documentation
component_docs(
    name = "camera_front_docs",
    component = ":adas_camera_front_ecu",
    wit_interfaces = [
        "//wit/interfaces:adas-data",
        "//wit/interfaces:adas-control",
    ],
    readme = "README.md",
    out = "camera_front_component.html",
)

# Validation checks
component_validation(
    name = "camera_front_validation",
    component = ":adas_camera_front_ecu",
    validations = [
        "interface_compliance",
        "timing_constraints",
        "memory_usage",
        "safety_requirements",
    ],
    asil_level = "B",
    tags = ["safety_critical", "validation"],
)

# Example query targets
# bazel query //components/sensors/camera-front:all
# bazel query 'deps(//components/sensors/camera-front:adas_camera_front_ecu)'
# bazel query 'attr(tags, "sensor_layer", //...)'
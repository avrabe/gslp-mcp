package adas:domain-controller@0.1.0;

/// ADAS Domain Controller - Central coordination unit implementing AUTOSAR Adaptive Platform
interface adas-domain-controller {
    /// ADAS system state and coordination
    record adas-system-state {
        system-mode: adas-mode,
        active-features: list<adas-feature>,
        system-health: system-health,
        performance-metrics: performance-metrics,
        safety-status: safety-status,
        timestamp: u64,
    }

    enum adas-mode {
        off,
        standby,
        partial-active,      // Level 1
        conditional-active,  // Level 2
        high-automation,     // Level 3
        degraded,
        emergency,
        fault,
    }

    enum adas-feature {
        adaptive-cruise-control,
        lane-keeping-assist,
        automatic-emergency-braking,
        blind-spot-monitoring,
        traffic-sign-recognition,
        parking-assist,
        highway-pilot,
        traffic-jam-assist,
        emergency-steering,
        night-vision,
    }

    record system-health {
        overall-health: f32,        // 0.0 to 1.0
        sensor-health: list<sensor-health>,
        ecu-health: list<ecu-health>,
        communication-health: communication-health,
        ai-model-health: list<ai-model-health>,
    }

    record sensor-health {
        sensor-id: string,
        sensor-type: string,
        health-score: f32,
        last-update: u64,
        fault-codes: list<u16>,
        calibration-status: bool,
    }

    record ecu-health {
        ecu-id: string,
        cpu-usage: f32,             // percentage
        memory-usage: f32,          // percentage
        temperature: f32,           // Celsius
        uptime: u64,                // seconds
        error-count: u32,
        status: ecu-status,
    }

    enum ecu-status {
        online,
        offline,
        degraded,
        fault,
        updating,
    }

    record communication-health {
        can-bus-status: bus-status,
        ethernet-status: bus-status,
        packet-loss-rate: f32,
        latency-average: f32,       // milliseconds
        bandwidth-utilization: f32, // percentage
    }

    enum bus-status {
        active,
        degraded,
        fault,
        offline,
    }

    record ai-model-health {
        model-id: string,
        model-type: string,
        inference-time: f32,        // milliseconds
        accuracy-score: f32,
        memory-usage: u32,          // MB
        last-update: u64,
        status: ai-model-status,
    }

    enum ai-model-status {
        active,
        loading,
        updating,
        error,
        offline,
    }

    record performance-metrics {
        system-latency: f32,        // milliseconds
        processing-load: f32,       // percentage
        decision-frequency: f32,    // Hz
        safety-margin: f32,
        reliability-score: f32,
    }

    record safety-status {
        safety-level: safety-level,
        redundancy-status: list<redundancy-check>,
        fail-safe-active: bool,
        safety-violations: list<safety-violation>,
        iso26262-compliance: bool,
    }

    enum safety-level {
        asil-a,
        asil-b,
        asil-c,
        asil-d,
        qm,                         // Quality Management
    }

    record redundancy-check {
        function-name: string,
        primary-active: bool,
        backup-active: bool,
        redundancy-factor: f32,
    }

    record safety-violation {
        violation-id: u32,
        severity: violation-severity,
        description: string,
        timestamp: u64,
        mitigation-action: string,
    }

    enum violation-severity {
        info,
        warning,
        critical,
        fatal,
    }

    /// Mission and scenario management
    record driving-mission {
        mission-id: u32,
        mission-type: mission-type,
        destination: option<position>,
        route-waypoints: list<waypoint>,
        constraints: mission-constraints,
        priority: mission-priority,
    }

    enum mission-type {
        manual-driving,
        highway-pilot,
        parking,
        emergency-stop,
        remote-parking,
        valet-parking,
    }

    record position {
        latitude: f64,
        longitude: f64,
        altitude: f32,
    }

    record waypoint {
        position: position,
        speed-limit: f32,
        waypoint-type: waypoint-type,
    }

    enum waypoint-type {
        normal,
        stop,
        yield,
        traffic-light,
        parking-spot,
    }

    record mission-constraints {
        max-speed: f32,
        comfort-level: comfort-level,
        safety-margin: f32,
        energy-efficiency: bool,
    }

    enum comfort-level {
        sport,
        normal,
        comfort,
        eco,
    }

    enum mission-priority {
        low,
        normal,
        high,
        emergency,
    }

    /// Resource management
    record resource-allocation {
        compute-resources: compute-allocation,
        memory-allocation: memory-allocation,
        bandwidth-allocation: bandwidth-allocation,
        power-budget: power-allocation,
    }

    record compute-allocation {
        cpu-cores: list<core-assignment>,
        gpu-allocation: f32,        // percentage
        dsp-allocation: f32,        // percentage
    }

    record core-assignment {
        core-id: u32,
        assigned-task: string,
        utilization: f32,           // percentage
    }

    record memory-allocation {
        total-memory: u32,          // MB
        allocated-memory: u32,      // MB
        fragmentation: f32,         // percentage
        critical-allocations: list<memory-block>,
    }

    record memory-block {
        block-id: string,
        size: u32,                  // MB
        owner: string,
        priority: allocation-priority,
    }

    enum allocation-priority {
        critical,
        high,
        normal,
        low,
    }

    record bandwidth-allocation {
        total-bandwidth: u32,       // Mbps
        allocated-bandwidth: u32,   // Mbps
        qos-reservations: list<qos-reservation>,
    }

    record qos-reservation {
        service-id: string,
        guaranteed-bandwidth: u32,  // Mbps
        latency-requirement: f32,   // milliseconds
        priority: qos-priority,
    }

    enum qos-priority {
        real-time,
        high,
        normal,
        best-effort,
    }

    record power-allocation {
        total-power: f32,           // Watts
        allocated-power: f32,       // Watts
        thermal-limit: f32,         // Celsius
        power-efficiency: f32,      // performance/watt
    }

    /// Initialize ADAS domain controller
    initialize: func() -> result<_, string>;

    /// Start ADAS system with specific mode
    start-system: func(mode: adas-mode, features: list<adas-feature>) -> result<_, string>;

    /// Stop ADAS system
    stop-system: func() -> result<_, string>;

    /// Get current system state
    get-system-state: func() -> adas-system-state;

    /// Execute driving mission
    execute-mission: func(mission: driving-mission) -> result<u32, string>; // returns mission-id

    /// Abort current mission
    abort-mission: func(mission-id: u32) -> result<_, string>;

    /// Handle emergency situation
    emergency-response: func(emergency-type: emergency-type) -> result<_, string>;

    enum emergency-type {
        collision-imminent,
        sensor-failure,
        actuator-failure,
        system-fault,
        driver-incapacitated,
        external-emergency,
    }

    /// Update resource allocation
    allocate-resources: func(allocation: resource-allocation) -> result<_, string>;

    /// Perform system health check
    health-check: func() -> result<system-health, string>;

    /// Get performance diagnostics
    get-diagnostics: func() -> result<diagnostic-report, string>;

    record diagnostic-report {
        system-uptime: u64,         // seconds
        total-errors: u32,
        critical-errors: u32,
        performance-score: f32,
        recommendation: list<string>,
    }

    /// Over-the-air update management
    ota-update: func(update-package: list<u8>) -> result<_, string>;

    /// Configuration management
    update-configuration: func(config: system-configuration) -> result<_, string>;

    record system-configuration {
        feature-enables: list<feature-config>,
        safety-parameters: safety-config,
        performance-tuning: performance-config,
    }

    record feature-config {
        feature: adas-feature,
        enabled: bool,
        parameters: list<parameter>,
    }

    record parameter {
        name: string,
        value: string,
    }

    record safety-config {
        reaction-time: f32,         // milliseconds
        safety-margins: list<f32>,
        fail-safe-behavior: fail-safe-type,
    }

    enum fail-safe-type {
        minimal-risk-condition,
        emergency-stop,
        handover-to-driver,
        safe-park,
    }

    record performance-config {
        processing-priority: list<priority-assignment>,
        latency-targets: list<latency-target>,
        throughput-targets: list<throughput-target>,
    }

    record priority-assignment {
        component: string,
        priority: u8,               // 0-255
    }

    record latency-target {
        component: string,
        target-latency: f32,        // milliseconds
    }

    record throughput-target {
        component: string,
        target-throughput: f32,     // Hz
    }
}

world adas-domain-controller-component {
    export adas-domain-controller;
}
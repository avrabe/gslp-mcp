/// Corner Radar Component - EXPORTS short-range radar data for blind spot/cross-traffic
package adas:radar-corner@0.1.0;

world radar-corner-component {
    /// Export radar data stream
    export radar-data: interface {
        /// Shared spatial types
        record position3d {
            x: f64,
            y: f64,
            z: f64,
        }

        record velocity3d {
            vx: f64,
            vy: f64,
            vz: f64,
            speed: f64,
        }

        record quaternion {
            x: f64,
            y: f64,
            z: f64,
            w: f64,
        }

        /// Radar data types
        record radar-scan {
            targets: list<radar-target>,
            timestamp: u64,
            scan-id: u32,
            sensor-pose: radar-pose,
        }

        record radar-target {
            position: position3d,
            velocity: velocity3d,
            range: f64,
            azimuth: f64,
            elevation: f64,
            rcs: f64,  // Radar Cross Section
            signal-strength: f64,
            confidence: f32,
        }

        record radar-pose {
            position: position3d,
            orientation: quaternion,
        }

        resource radar-stream {
            get-scan: func() -> result<radar-scan, string>;
            is-available: func() -> bool;
            get-range: func() -> f64;
        }
        
        create-stream: func() -> radar-stream;
    }
    
    /// Export corner radar control interface
    export corner-control: interface {
        /// Corner radar configuration
        record corner-config {
            detection-zone: detection-zone,
            sensitivity-level: sensitivity-level,
            scan-rate: u32,
            max-range: f64,
            angular-coverage: f32,
            blind-spot-monitoring: bool,
            cross-traffic-alert: bool,
        }

        enum detection-zone {
            rear-left,
            rear-right,
            front-left,
            front-right,
        }

        enum sensitivity-level {
            low,
            medium,
            high,
            adaptive,
        }

        enum corner-status {
            offline,
            initializing,
            monitoring,
            alert,
            error,
            maintenance,
        }

        record diagnostic-result {
            detection-accuracy: test-result,
            false-alarm-rate: test-result,
            coverage-area: test-result,
            signal-quality: test-result,
            environmental-adaptation: test-result,
            overall-score: f32,
        }

        enum test-result {
            passed,
            failed,
            warning,
            not-tested,
        }

        /// Initialize corner radar
        initialize: func(config: corner-config) -> result<_, string>;
        
        /// Start monitoring
        start-monitoring: func() -> result<_, string>;
        
        /// Stop monitoring
        stop-monitoring: func() -> result<_, string>;
        
        /// Update configuration
        update-config: func(config: corner-config) -> result<_, string>;
        
        /// Get system status
        get-status: func() -> corner-status;
        
        /// Run diagnostics
        run-diagnostic: func() -> result<diagnostic-result, string>;
    }
}
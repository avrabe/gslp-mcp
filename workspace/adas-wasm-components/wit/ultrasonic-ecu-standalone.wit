package adas:ultrasonic@0.1.0;

/// Ultrasonic sensor array for parking assistance and low-speed maneuvering
interface ultrasonic {
    /// Ultrasonic sensor position
    enum sensor-position {
        front-left,
        front-center-left,
        front-center-right,
        front-right,
        rear-left,
        rear-center-left,
        rear-center-right,
        rear-right,
        side-left-front,
        side-left-rear,
        side-right-front,
        side-right-rear,
    }

    /// Ultrasonic measurement
    record ultrasonic-measurement {
        sensor-position: sensor-position,
        distance: f32,
        confidence: f32,
        temperature-compensated: bool,
        measurement-time: u64,
    }

    /// Parking assistance data
    record parking-assistance {
        all-measurements: list<ultrasonic-measurement>,
        closest-obstacle: option<obstacle-info>,
        parking-guidance: parking-guidance,
        warning-level: warning-level,
    }

    record obstacle-info {
        position: sensor-position,
        distance: f32,
        obstacle-type: obstacle-type,
        confidence: f32,
    }

    enum obstacle-type {
        vehicle,
        wall,
        pole,
        curb,
        person,
        unknown,
    }

    record parking-guidance {
        direction: guidance-direction,
        recommended-action: parking-action,
        distance-to-target: option<f32>,
        steering-guidance: option<f32>,
    }

    enum guidance-direction {
        forward,
        reverse,
        left,
        right,
        stop,
    }

    enum parking-action {
        continue,
        slow-down,
        stop,
        turn-left,
        turn-right,
        straighten,
    }

    enum warning-level {
        none,
        info,
        caution,
        warning,
        critical,
    }

    /// System configuration
    record ultrasonic-config {
        enabled-sensors: list<sensor-position>,
        sensitivity: sensitivity-level,
        update-rate: u32,
        min-detection-distance: f32,
        max-detection-distance: f32,
        temperature-compensation: bool,
    }

    enum sensitivity-level {
        low,
        medium,
        high,
        adaptive,
    }

    enum system-status {
        offline,
        initializing,
        active,
        error,
        partial-failure,
        calibrating,
    }

    /// Initialize ultrasonic system
    initialize: func(config: ultrasonic-config) -> result<_, string>;

    /// Start ultrasonic sensing
    start-sensing: func() -> result<_, string>;

    /// Stop ultrasonic sensing
    stop-sensing: func() -> result<_, string>;

    /// Get measurements from all sensors
    get-measurements: func() -> result<list<ultrasonic-measurement>, string>;

    /// Get parking assistance information
    get-parking-assistance: func() -> result<parking-assistance, string>;

    /// Get system status
    get-status: func() -> system-status;

    /// Update configuration
    update-config: func(config: ultrasonic-config) -> result<_, string>;

    /// Calibrate sensors
    calibrate-sensors: func() -> result<_, string>;

    /// Run system diagnostic
    run-diagnostic: func() -> result<diagnostic-result, string>;

    record diagnostic-result {
        sensor-health: list<sensor-health>,
        overall-health: f32,
        temperature: f32,
        voltage: f32,
    }

    record sensor-health {
        position: sensor-position,
        operational: bool,
        signal-quality: f32,
        response-time: f32,
    }
}

world ultrasonic-component {
    export ultrasonic;
}
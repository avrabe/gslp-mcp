/// LiDAR Component - EXPORTS high-resolution 3D point cloud data
package adas:lidar@0.1.0;

world lidar-component {
    /// Export LiDAR data stream
    export lidar-data: interface {
        /// Shared spatial types
        record position3d {
            x: f64,
            y: f64,
            z: f64,
        }

        record velocity3d {
            vx: f64,
            vy: f64,
            vz: f64,
            speed: f64,
        }

        record quaternion {
            x: f64,
            y: f64,
            z: f64,
            w: f64,
        }

        /// LiDAR data types
        record point-cloud {
            points: list<lidar-point>,
            timestamp: u64,
            frame-id: string,
            sensor-pose: lidar-pose,
        }

        record lidar-point {
            position: position3d,
            intensity: f32,
            ring: u16,
            timestamp: u64,
        }

        record lidar-pose {
            position: position3d,
            orientation: quaternion,
        }

        resource lidar-stream {
            get-cloud: func() -> result<point-cloud, string>;
            is-available: func() -> bool;
            get-point-count: func() -> u32;
        }
        
        create-stream: func() -> lidar-stream;
    }
    
    /// Export LiDAR control interface
    export lidar-control: interface {
        /// LiDAR configuration
        record lidar-config {
            scan-frequency: u32,
            angular-resolution: f32,
            range-resolution: f32,
            max-range: f64,
            intensity-threshold: f32,
            noise-filtering: bool,
            ground-removal: bool,
        }

        enum lidar-status {
            offline,
            initializing,
            warming-up,
            scanning,
            error,
            maintenance,
        }

        record diagnostic-result {
            laser-health: test-result,
            mirror-alignment: test-result,
            range-accuracy: test-result,
            point-density: test-result,
            intensity-calibration: test-result,
            overall-score: f32,
        }

        enum test-result {
            passed,
            failed,
            warning,
            not-tested,
        }

        /// Initialize LiDAR system
        initialize: func(config: lidar-config) -> result<_, string>;
        
        /// Start scanning
        start-scanning: func() -> result<_, string>;
        
        /// Stop scanning
        stop-scanning: func() -> result<_, string>;
        
        /// Update configuration
        update-config: func(config: lidar-config) -> result<_, string>;
        
        /// Get system status
        get-status: func() -> lidar-status;
        
        /// Run diagnostics
        run-diagnostic: func() -> result<diagnostic-result, string>;
    }
}
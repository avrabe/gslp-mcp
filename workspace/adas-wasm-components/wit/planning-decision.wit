/// Planning & Decision Component - IMPORTS perception data, EXPORTS trajectory plans and decisions
package adas:planning-decision@0.1.0;

world planning-decision-component {
    /// Import unified perception model from perception fusion
    import perception-data: interface {
        record position3d {
            x: f64,
            y: f64,
            z: f64,
        }

        record velocity3d {
            vx: f64,
            vy: f64,
            vz: f64,
            speed: f64,
        }

        record acceleration3d {
            ax: f64,
            ay: f64,
            az: f64,
            magnitude: f64,
        }

        record perception-model {
            perceived-objects: list<perceived-object>,
            scene-understanding: scene-context,
            risk-assessment: risk-assessment,
            timestamp: u64,
            confidence: f32,
        }

        record perceived-object {
            object-id: u32,
            object-type: object-type,
            position: position3d,
            velocity: velocity3d,
            predicted-trajectory: predicted-trajectory,
            semantic-attributes: semantic-attributes,
            risk-level: risk-level,
            confidence: f32,
        }

        record predicted-trajectory {
            waypoints: list<trajectory-point>,
            duration: f32,
            probability: f32,
        }

        record trajectory-point {
            position: position3d,
            velocity: velocity3d,
            acceleration: acceleration3d,
            timestamp: f32,
        }

        record semantic-attributes {
            size-category: size-category,
            movement-state: movement-state,
            interaction-potential: f32,
            lane-association: lane-association,
        }

        record scene-context {
            traffic-density: traffic-density,
            weather-conditions: weather-conditions,
            lighting-conditions: lighting-conditions,
            road-type: road-type,
            intersection-nearby: bool,
        }

        record risk-assessment {
            overall-risk: risk-level,
            collision-probability: f32,
            time-to-collision: f32,
            critical-objects: list<u32>,
            recommended-actions: list<action-recommendation>,
        }

        enum object-type {
            unknown,
            vehicle,
            pedestrian,
            cyclist,
            motorcycle,
            truck,
            bus,
            traffic-sign,
            traffic-light,
            construction-zone,
            road-debris,
        }

        enum size-category {
            small,
            medium,
            large,
            oversized,
        }

        enum movement-state {
            stationary,
            slow-moving,
            normal-speed,
            fast-moving,
            erratic,
        }

        enum lane-association {
            same-lane,
            adjacent-left,
            adjacent-right,
            oncoming,
            crossing,
            off-road,
        }

        enum traffic-density {
            light,
            moderate,
            heavy,
            congested,
        }

        enum weather-conditions {
            clear,
            cloudy,
            rain,
            snow,
            fog,
            extreme,
        }

        enum lighting-conditions {
            daylight,
            dusk,
            night,
            artificial,
        }

        enum road-type {
            city-street,
            highway,
            rural-road,
            parking-lot,
            construction-zone,
        }

        enum risk-level {
            none,
            low,
            medium,
            high,
            critical,
        }

        enum action-recommendation {
            none,
            monitor,
            prepare-brake,
            brake,
            emergency-stop,
            steer-left,
            steer-right,
            slow-down,
            change-lane,
        }

        resource perception-stream {
            get-perception: func() -> result<perception-model, string>;
            is-available: func() -> bool;
            get-object-count: func() -> u32;
        }
        
        create-stream: func() -> perception-stream;
    }
    
    /// Export planning decisions and trajectory plans
    export planning-data: interface {
        record position3d {
            x: f64,
            y: f64,
            z: f64,
        }

        record velocity3d {
            vx: f64,
            vy: f64,
            vz: f64,
            speed: f64,
        }

        record acceleration3d {
            ax: f64,
            ay: f64,
            az: f64,
            magnitude: f64,
        }

        record planning-result {
            trajectory-plan: trajectory-plan,
            driving-decisions: driving-decisions,
            mission-status: mission-status,
            timestamp: u64,
            planning-confidence: f32,
        }

        record trajectory-plan {
            ego-trajectory: planned-trajectory,
            alternative-trajectories: list<planned-trajectory>,
            planning-horizon: f32,
            update-frequency: u32,
            trajectory-confidence: f32,
        }

        record planned-trajectory {
            waypoints: list<trajectory-waypoint>,
            duration: f32,
            cost: f32,
            feasibility: f32,
            safety-score: f32,
            comfort-score: f32,
        }

        record trajectory-waypoint {
            position: position3d,
            velocity: velocity3d,
            acceleration: acceleration3d,
            curvature: f32,
            timestamp: f32,
            lane-id: u32,
        }

        record driving-decisions {
            primary-action: driving-action,
            secondary-actions: list<driving-action>,
            speed-recommendation: speed-command,
            steering-recommendation: steering-command,
            urgency-level: urgency-level,
            action-confidence: f32,
        }

        record speed-command {
            target-speed: f32,
            acceleration-limit: f32,
            deceleration-limit: f32,
            speed-profile: speed-profile,
        }

        record steering-command {
            target-curvature: f32,
            steering-rate-limit: f32,
            lane-keeping-mode: lane-keeping-mode,
        }

        record mission-status {
            current-goal: goal-type,
            progress-percentage: f32,
            remaining-distance: f32,
            estimated-time: f32,
            obstacles-detected: u32,
            replanning-required: bool,
        }

        enum driving-action {
            continue-straight,
            change-lane-left,
            change-lane-right,
            turn-left,
            turn-right,
            merge,
            overtake,
            yield,
            stop,
            emergency-brake,
            park,
            reverse,
        }

        enum speed-profile {
            constant,
            accelerating,
            decelerating,
            adaptive-cruise,
            emergency-stop,
        }

        enum lane-keeping-mode {
            center,
            left-bias,
            right-bias,
            lane-change,
            emergency-avoidance,
        }

        enum goal-type {
            navigation,
            lane-keeping,
            parking,
            emergency-stop,
            manual-override,
        }

        enum urgency-level {
            routine,
            attention,
            caution,
            urgent,
            critical,
        }

        resource planning-stream {
            get-planning: func() -> result<planning-result, string>;
            is-available: func() -> bool;
            get-trajectory-count: func() -> u32;
        }
        
        create-stream: func() -> planning-stream;
    }
    
    /// Export planning control interface
    export planning-control: interface {
        record planning-config {
            planning-horizon: f32,
            update-frequency: u32,
            safety-margin: f32,
            comfort-preference: f32,
            efficiency-weight: f32,
            risk-tolerance: risk-tolerance,
            planning-algorithm: planning-algorithm,
        }

        record destination {
            target-position: position3d,
            approach-direction: f32,
            parking-required: bool,
            arrival-time: option<u64>,
            route-preferences: route-preferences,
        }

        record position3d {
            x: f64,
            y: f64,
            z: f64,
        }

        record route-preferences {
            prefer-highways: bool,
            avoid-tolls: bool,
            minimize-time: bool,
            minimize-distance: bool,
            eco-mode: bool,
        }

        enum risk-tolerance {
            conservative,
            normal,
            aggressive,
            emergency,
        }

        enum planning-algorithm {
            rule-based,
            rrt-star,
            a-star,
            machine-learning,
            hybrid,
        }

        enum planning-status {
            offline,
            initializing,
            planning,
            executing,
            replanning,
            completed,
            error,
        }

        record performance-metrics {
            planning-time-ms: f32,
            trajectory-smoothness: f32,
            safety-violations: u32,
            comfort-score: f32,
            efficiency-score: f32,
            success-rate: f32,
            cpu-usage-percent: f32,
            memory-usage-mb: u32,
        }

        record diagnostic-result {
            perception-integration: test-result,
            trajectory-generation: test-result,
            decision-logic: test-result,
            safety-checks: test-result,
            performance-metrics: test-result,
            overall-score: f32,
        }

        enum test-result {
            passed,
            failed,
            warning,
            not-tested,
        }

        /// Initialize planning system
        initialize: func(config: planning-config) -> result<_, string>;
        
        /// Start planning process
        start-planning: func() -> result<_, string>;
        
        /// Stop planning process
        stop-planning: func() -> result<_, string>;
        
        /// Set navigation destination
        set-destination: func(destination: destination) -> result<_, string>;
        
        /// Update configuration
        update-config: func(config: planning-config) -> result<_, string>;
        
        /// Get system status
        get-status: func() -> planning-status;
        
        /// Get performance metrics
        get-performance: func() -> performance-metrics;
        
        /// Run diagnostics
        run-diagnostic: func() -> result<diagnostic-result, string>;
        
        /// Emergency stop command
        emergency-stop: func() -> result<_, string>;
        
        /// Resume from emergency stop
        resume-planning: func() -> result<_, string>;
    }
}
/// FEO Demo Component - Demonstrates Fixed Execution Order interface usage
package adas:feo-demo@0.1.0;

world feo-demo-component {
    /// Import FEO interfaces from other components
    import video-decoder-feo: interface {
        enum execution-state {
            idle, ready, processing, completed, error, disabled
        }
        record execution-metrics {
            execution-time-us: u64,
            input-items-consumed: u32,
            output-items-produced: u32,
            errors-encountered: u32,
            memory-used-bytes: u64,
            cpu-cycles-estimated: u64,
        }
        record component-info {
            component-id: string,
            component-type: string,
            version: string,
            input-interfaces: list<string>,
            output-interfaces: list<string>,
            execution-time-budget-us: u64,
            memory-budget-bytes: u64,
        }
        
        // Core FEO interface
        execute-cycle: func() -> result<execution-metrics, string>;
        can-execute: func() -> bool;
        has-output: func() -> bool;
        get-execution-state: func() -> execution-state;
        get-component-info: func() -> component-info;
        get-diagnostics: func() -> result<string, string>;
    }
    
    import object-detection-feo: interface {
        enum execution-state {
            idle, ready, processing, completed, error, disabled
        }
        record execution-metrics {
            execution-time-us: u64,
            input-items-consumed: u32,
            output-items-produced: u32,
            errors-encountered: u32,
            memory-used-bytes: u64,
            cpu-cycles-estimated: u64,
        }
        record component-info {
            component-id: string,
            component-type: string,
            version: string,
            input-interfaces: list<string>,
            output-interfaces: list<string>,
            execution-time-budget-us: u64,
            memory-budget-bytes: u64,
        }
        
        // Core FEO interface  
        execute-cycle: func() -> result<execution-metrics, string>;
        can-execute: func() -> bool;
        has-output: func() -> bool;
        get-execution-state: func() -> execution-state;
        get-component-info: func() -> component-info;
        get-diagnostics: func() -> result<string, string>;
    }

    /// Export demo control interface
    export feo-demo: interface {
        enum demo-mode {
            manual-step,     // Execute components manually step by step
            auto-sequence,   // Execute in automatic sequence
            diagnostic-only, // Only show component status
        }
        
        record demo-config {
            mode: demo-mode,
            max-cycles: u32,
            delay-between-cycles-ms: u32,
        }
        
        record demo-metrics {
            total-cycles-executed: u32,
            video-decoder-executions: u32,
            object-detection-executions: u32,
            total-execution-time-us: u64,
            average-cycle-time-us: f64,
        }
        
        /// Configure demo parameters
        configure-demo: func(config: demo-config) -> result<_, string>;
        
        /// Execute single FEO cycle (video â†’ detection)
        execute-single-cycle: func() -> result<string, string>;
        
        /// Execute multiple FEO cycles
        execute-n-cycles: func(count: u32) -> result<string, string>;
        
        /// Get component status overview
        get-component-status: func() -> result<string, string>;
        
        /// Get demo metrics
        get-demo-metrics: func() -> demo-metrics;
        
        /// Run comprehensive diagnostics
        run-full-diagnostics: func() -> result<string, string>;
        
        /// Reset all components and demo state
        reset-demo: func() -> result<_, string>;
    }
}
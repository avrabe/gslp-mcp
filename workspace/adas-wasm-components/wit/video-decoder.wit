/// Video Decoder Component - Exports camera-compatible frames from embedded MP4
package adas:video-decoder@0.1.0;

world video-decoder-component {
    /// Import execution control interface for FEO compatibility
    import execution-control: interface {
        enum execution-state {
            idle, ready, processing, completed, error, disabled
        }
        enum execution-result {
            success, no-input-data, no-output-space, processing-error, component-disabled
        }
        record execution-metrics {
            execution-time-us: u64,
            input-items-consumed: u32,
            output-items-produced: u32,
            errors-encountered: u32,
            memory-used-bytes: u64,
            cpu-cycles-estimated: u64,
        }
        record component-info {
            component-id: string,
            component-type: string,
            version: string,
            input-interfaces: list<string>,
            output-interfaces: list<string>,
            execution-time-budget-us: u64,
            memory-budget-bytes: u64,
        }
        record data-slot-info {
            slot-name: string,
            slot-type: string,
            buffer-size: u32,
            buffer-capacity: u32,
            items-available: u32,
            items-pending: u32,
        }
    }
    /// Export camera-data interface compatible with existing pipeline
    export camera-data: interface {
        /// Shared spatial types
        record position3d {
            x: f64,
            y: f64,
            z: f64,
        }

        record quaternion {
            x: f64,
            y: f64,
            z: f64,
            w: f64,
        }

        /// Camera data types
        record camera-frame {
            width: u32,
            height: u32,
            data: list<u8>,
            format: pixel-format,
            timestamp: u64,
            exposure-time: f32,
            gain: f32,
            sensor-pose: camera-pose,
        }

        record camera-pose {
            position: position3d,
            orientation: quaternion,
        }

        enum pixel-format {
            rgb8,
            rgba8,
            bgr8,
            bgra8,
            yuv420,
            gray8,
            gray16,
        }

        record camera-intrinsics {
            focal-length-x: f64,
            focal-length-y: f64,
            principal-point-x: f64,
            principal-point-y: f64,
            distortion: list<f64>,
        }

        resource camera-stream {
            get-frame: func() -> result<camera-frame, string>;
            get-intrinsics: func() -> camera-intrinsics;
            is-available: func() -> bool;
        }
        
        create-stream: func() -> camera-stream;
    }
    
    /// Export video control interface for playback control
    export video-control: interface {
        /// Video playback configuration
        record video-config {
            auto-play: bool,
            loop-enabled: bool,
            playback-speed: f32,
            start-frame: u32,
        }

        enum video-status {
            unloaded,
            loading,
            ready,
            playing,
            paused,
            ended,
            error,
        }

        record video-info {
            width: u32,
            height: u32,
            frame-count: u32,
            frame-rate: f32,
            duration-ms: u64,
            file-size: u64,
        }

        record playback-metrics {
            current-frame: u32,
            elapsed-time-ms: u64,
            playback-speed: f32,
            frames-decoded: u32,
            cache-hit-rate: f32,
        }

        /// Load embedded video file
        load-embedded-video: func() -> result<video-info, string>;
        
        /// Playback controls
        play: func() -> result<_, string>;
        pause: func() -> result<_, string>;
        stop: func() -> result<_, string>;
        seek-to-frame: func(frame: u32) -> result<_, string>;
        seek-to-time: func(time-ms: u64) -> result<_, string>;
        
        /// Configuration
        set-playback-speed: func(speed: f32) -> result<_, string>;
        set-loop: func(enabled: bool) -> result<_, string>;
        update-config: func(config: video-config) -> result<_, string>;
        
        /// Status and metrics
        get-status: func() -> video-status;
        get-current-frame: func() -> u32;
        get-elapsed-time: func() -> u64;
        get-playback-metrics: func() -> playback-metrics;
        get-video-info: func() -> result<video-info, string>;
        
        /// Diagnostics
        run-diagnostic: func() -> result<string, string>;
    }
    
    /// Export FEO execution control interface
    export feo-control: interface {
        enum execution-state {
            idle, ready, processing, completed, error, disabled
        }
        enum execution-result {
            success, no-input-data, no-output-space, processing-error, component-disabled
        }
        record execution-metrics {
            execution-time-us: u64,
            input-items-consumed: u32,
            output-items-produced: u32,
            errors-encountered: u32,
            memory-used-bytes: u64,
            cpu-cycles-estimated: u64,
        }
        record component-info {
            component-id: string,
            component-type: string,
            version: string,
            input-interfaces: list<string>,
            output-interfaces: list<string>,
            execution-time-budget-us: u64,
            memory-budget-bytes: u64,
        }
        record data-slot-info {
            slot-name: string,
            slot-type: string,
            buffer-size: u32,
            buffer-capacity: u32,
            items-available: u32,
            items-pending: u32,
        }
        
        // Core FEO interface
        execute-cycle: func() -> result<execution-metrics, string>;
        can-execute: func() -> bool;
        has-output: func() -> bool;
        
        // Component control
        reset-component: func() -> result<_, string>;
        enable-component: func() -> result<_, string>;
        disable-component: func() -> result<_, string>;
        flush-component: func() -> result<_, string>;
        
        // Status and introspection
        get-execution-state: func() -> execution-state;
        get-last-metrics: func() -> execution-metrics;
        get-component-info: func() -> component-info;
        get-data-slot-status: func() -> list<data-slot-info>;
        get-diagnostics: func() -> result<string, string>;
        
        // Data slot management
        has-input-data: func(slot-name: string) -> result<bool, string>;
        has-output-space: func(slot-name: string) -> result<bool, string>;
        get-slot-size: func(slot-name: string) -> result<u32, string>;
        clear-slot: func(slot-name: string) -> result<_, string>;
    }
}
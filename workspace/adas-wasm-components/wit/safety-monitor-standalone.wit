package adas:safety-monitor@0.1.0;

/// ISO 26262 compliant safety monitoring and failsafe system
interface safety-monitor {
    /// Safety integrity level according to ISO 26262
    enum asil-level {
        qm,        // Quality Management (non-safety critical)
        asil-a,    // ASIL A (lowest safety integrity)
        asil-b,    // ASIL B 
        asil-c,    // ASIL C
        asil-d,    // ASIL D (highest safety integrity)
    }

    /// System safety state
    record safety-state {
        overall-state: safety-status,
        asil-compliance: asil-level,
        active-hazards: list<hazard>,
        safety-violations: list<safety-violation>,
        failsafe-actions: list<failsafe-action>,
        system-degradation: degradation-level,
        timestamp: u64,
    }

    enum safety-status {
        safe,
        warning,
        unsafe,
        critical,
        emergency,
        system-failure,
    }

    record hazard {
        hazard-id: u32,
        hazard-type: hazard-type,
        severity: severity-level,
        probability: probability-level,
        risk-level: risk-level,
        mitigation-status: mitigation-status,
        time-to-impact: option<f32>,
        affected-functions: list<safety-function>,
    }

    enum hazard-type {
        collision-frontal,
        collision-rear,
        collision-side,
        collision-pedestrian,
        lane-departure,
        rollover,
        brake-failure,
        steering-failure,
        acceleration-malfunction,
        sensor-failure,
        communication-failure,
        power-loss,
        software-fault,
        hardware-fault,
        environmental-hazard,
    }

    enum severity-level {
        s0-no-injuries,
        s1-light-moderate-injuries,
        s2-severe-life-threatening-injuries,
        s3-life-threatening-fatal-injuries,
    }

    enum probability-level {
        e0-very-low,
        e1-low,
        e2-medium,
        e3-high,
        e4-very-high,
    }

    enum risk-level {
        acceptable,
        tolerable,
        unacceptable,
    }

    enum mitigation-status {
        none,
        in-progress,
        active,
        failed,
        unavailable,
    }

    enum safety-function {
        adaptive-cruise-control,
        emergency-braking,
        lane-keeping-assist,
        collision-avoidance,
        blind-spot-monitoring,
        parking-assist,
        traffic-sign-recognition,
        driver-monitoring,
        vehicle-stability,
        power-steering,
        braking-system,
        lighting-system,
    }

    record safety-violation {
        violation-id: u32,
        violation-type: violation-type,
        asil-requirement: asil-level,
        detected-time: u64,
        source-component: string,
        description: string,
        corrective-action: option<corrective-action>,
    }

    enum violation-type {
        timing-violation,
        redundancy-failure,
        range-check-failure,
        plausibility-check-failure,
        communication-timeout,
        sensor-out-of-range,
        actuator-response-failure,
        memory-corruption,
        stack-overflow,
        division-by-zero,
        null-pointer-access,
        buffer-overflow,
    }

    record corrective-action {
        action-type: action-type,
        target-component: string,
        parameters: list<string>,
        timeout: f32,
        success-criteria: string,
    }

    enum action-type {
        restart-component,
        switch-to-backup,
        reduce-functionality,
        shutdown-gracefully,
        emergency-stop,
        alert-driver,
        log-incident,
        request-maintenance,
    }

    record failsafe-action {
        action-id: u32,
        trigger-condition: trigger-condition,
        action-sequence: list<safety-action>,
        execution-status: execution-status,
        started-time: option<u64>,
        completion-time: option<u64>,
    }

    record trigger-condition {
        condition-type: condition-type,
        threshold-value: f32,
        hysteresis: f32,
        debounce-time: f32,
    }

    enum condition-type {
        sensor-failure,
        communication-loss,
        processing-delay,
        invalid-data,
        system-overload,
        power-drop,
        temperature-exceed,
        vibration-exceed,
        time-to-collision,
        lateral-acceleration,
        longitudinal-acceleration,
    }

    record safety-action {
        action-name: string,
        action-type: safety-action-type,
        priority: priority-level,
        execution-time: f32,
        dependencies: list<string>,
        parameters: list<action-parameter>,
    }

    enum safety-action-type {
        alert-driver,
        reduce-speed,
        apply-brakes,
        steer-correction,
        activate-hazards,
        shutdown-function,
        switch-to-manual,
        call-emergency,
        log-event,
        isolate-fault,
    }

    enum priority-level {
        low,
        medium,
        high,
        critical,
        emergency,
    }

    record action-parameter {
        parameter-name: string,
        parameter-value: string,
        parameter-type: parameter-type,
    }

    enum parameter-type {
        integer,
        float,
        boolean,
        text,
        enumeration,
    }

    enum execution-status {
        pending,
        executing,
        completed,
        failed,
        timeout,
        cancelled,
    }

    enum degradation-level {
        none,
        minimal,
        moderate,
        significant,
        severe,
        complete-failure,
    }

    /// Functional safety monitoring
    record functional-safety {
        safety-mechanisms: list<safety-mechanism>,
        diagnostic-coverage: f32,
        fault-tolerance: fault-tolerance-level,
        redundancy-status: redundancy-status,
        self-test-results: list<self-test-result>,
    }

    record safety-mechanism {
        mechanism-id: u32,
        mechanism-type: mechanism-type,
        target-function: safety-function,
        detection-capability: f32,
        reaction-time: f32,
        status: mechanism-status,
        last-activation: option<u64>,
    }

    enum mechanism-type {
        range-check,
        plausibility-check,
        timing-monitoring,
        sequence-monitoring,
        redundancy-check,
        checksum-verification,
        heartbeat-monitoring,
        watchdog-timer,
        memory-protection,
        stack-monitoring,
        control-flow-monitoring,
        data-integrity-check,
    }

    enum mechanism-status {
        active,
        inactive,
        failed,
        testing,
        disabled,
    }

    enum fault-tolerance-level {
        none,
        single-fault,
        dual-fault,
        multiple-fault,
    }

    record redundancy-status {
        primary-systems: list<system-status>,
        backup-systems: list<system-status>,
        voting-mechanism: voting-mechanism,
        switchover-capability: bool,
        current-active: string,
    }

    record system-status {
        system-name: string,
        operational: bool,
        health-score: f32,
        last-heartbeat: u64,
        fault-count: u32,
    }

    enum voting-mechanism {
        two-out-of-three,
        majority-voting,
        weighted-voting,
        master-slave,
        hot-standby,
    }

    record self-test-result {
        test-id: u32,
        test-name: string,
        test-type: test-type,
        test-outcome: test-result,
        execution-time: u64,
        details: string,
        coverage-percentage: f32,
    }

    enum test-type {
        power-on-self-test,
        periodic-self-test,
        on-demand-test,
        background-test,
        stress-test,
        boundary-test,
    }

    enum test-result {
        passed,
        failed,
        warning,
        skipped,
        timeout,
        error,
    }

    /// Driver monitoring and alerting
    record driver-monitoring {
        driver-state: driver-state,
        attention-level: attention-level,
        response-capability: response-capability,
        takeover-readiness: takeover-readiness,
        alert-escalation: alert-escalation,
    }

    record driver-state {
        alertness: alertness-level,
        distraction: distraction-level,
        impairment: impairment-level,
        hands-on-wheel: bool,
        eyes-on-road: bool,
        response-time: f32,
    }

    enum alertness-level {
        fully-alert,
        drowsy,
        microsleep,
        falling-asleep,
        unresponsive,
    }

    enum distraction-level {
        focused,
        slightly-distracted,
        moderately-distracted,
        highly-distracted,
        completely-distracted,
    }

    enum impairment-level {
        none,
        slight,
        moderate,
        severe,
        incapacitated,
    }

    enum attention-level {
        high,
        medium,
        low,
        critical,
        absent,
    }

    enum response-capability {
        immediate,
        delayed,
        impaired,
        unavailable,
    }

    enum takeover-readiness {
        ready,
        preparing,
        not-ready,
        unavailable,
    }

    record alert-escalation {
        current-level: alert-level,
        escalation-sequence: list<alert-level>,
        time-in-level: f32,
        next-escalation: option<f32>,
        max-level-reached: bool,
    }

    enum alert-level {
        none,
        visual,
        audible,
        haptic,
        emergency-stop,
        emergency-call,
    }

    /// System configuration
    record safety-config {
        asil-requirements: list<asil-requirement>,
        monitoring-frequency: u32,
        alert-thresholds: alert-thresholds,
        failsafe-timeouts: failsafe-timeouts,
        diagnostic-settings: diagnostic-settings,
        redundancy-config: redundancy-config,
    }

    record asil-requirement {
        function: safety-function,
        required-asil: asil-level,
        target-probability: f64,
        detection-time: f32,
        reaction-time: f32,
    }

    record alert-thresholds {
        attention-warning: f32,
        attention-critical: f32,
        response-time-warning: f32,
        response-time-critical: f32,
        system-fault-warning: f32,
        system-fault-critical: f32,
    }

    record failsafe-timeouts {
        driver-response-timeout: f32,
        system-recovery-timeout: f32,
        emergency-stop-timeout: f32,
        communication-timeout: f32,
        sensor-timeout: f32,
    }

    record diagnostic-settings {
        self-test-interval: u32,
        health-check-interval: u32,
        log-retention-days: u32,
        fault-injection-enabled: bool,
        coverage-target: f32,
    }

    record redundancy-config {
        enable-redundancy: bool,
        voting-threshold: f32,
        switchover-time: f32,
        backup-activation-delay: f32,
        health-check-frequency: u32,
    }

    enum safety-monitor-status {
        offline,
        initializing,
        active,
        degraded,
        failed,
        maintenance,
    }

    /// Initialize safety monitoring system
    initialize: func(config: safety-config) -> result<_, string>;

    /// Start safety monitoring
    start-monitoring: func() -> result<_, string>;

    /// Stop safety monitoring
    stop-monitoring: func() -> result<_, string>;

    /// Get current safety state
    get-safety-state: func() -> result<safety-state, string>;

    /// Report safety violation
    report-violation: func(violation: safety-violation) -> result<_, string>;

    /// Trigger failsafe action
    trigger-failsafe: func(hazard-id: u32) -> result<_, string>;

    /// Update driver monitoring data
    update-driver-state: func(driver-state: driver-state) -> result<_, string>;

    /// Run safety diagnostic
    run-diagnostic: func(test-type: test-type) -> result<self-test-result, string>;

    /// Get functional safety status
    get-functional-safety: func() -> result<functional-safety, string>;

    /// Acknowledge safety alert
    acknowledge-alert: func(alert-id: u32) -> result<_, string>;

    /// Get system status
    get-status: func() -> safety-monitor-status;

    /// Update configuration
    update-config: func(config: safety-config) -> result<_, string>;

    /// Get safety compliance report
    get-compliance-report: func() -> result<compliance-report, string>;

    record compliance-report {
        asil-compliance: list<asil-compliance>,
        safety-goals: list<safety-goal-status>,
        hazard-analysis: list<hazard-analysis>,
        verification-results: list<verification-result>,
        validation-results: list<validation-result>,
        report-timestamp: u64,
    }

    record asil-compliance {
        function: safety-function,
        required-asil: asil-level,
        achieved-asil: asil-level,
        compliant: bool,
        deviations: list<string>,
    }

    record safety-goal-status {
        goal-id: u32,
        goal-description: string,
        target-asil: asil-level,
        implementation-status: implementation-status,
        verification-status: verification-status,
        residual-risk: f64,
    }

    enum implementation-status {
        not-started,
        in-progress,
        implemented,
        verified,
        validated,
    }

    enum verification-status {
        not-verified,
        partially-verified,
        fully-verified,
        failed-verification,
    }

    record hazard-analysis {
        hazard-id: u32,
        operational-situation: string,
        failure-mode: string,
        severity: severity-level,
        exposure: exposure-level,
        controllability: controllability-level,
        asil-rating: asil-level,
    }

    enum exposure-level {
        e0-very-low,
        e1-low,
        e2-medium,
        e3-high,
        e4-very-high,
    }

    enum controllability-level {
        c0-controllable,
        c1-simply-controllable,
        c2-normally-uncontrollable,
        c3-difficult-to-control,
        c4-uncontrollable,
    }

    record verification-result {
        requirement-id: string,
        verification-method: verification-method,
        test-outcome: test-result,
        coverage-achieved: f32,
        defects-found: u32,
        verification-date: u64,
    }

    enum verification-method {
        review,
        analysis,
        simulation,
        test,
        inspection,
        demonstration,
    }

    record validation-result {
        validation-id: string,
        validation-scenario: string,
        expected-outcome: string,
        actual-outcome: string,
        test-outcome: test-result,
        validation-date: u64,
    }
}

world safety-monitor-component {
    export safety-monitor;
}
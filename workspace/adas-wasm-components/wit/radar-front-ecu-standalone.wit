package adas:radar-front@0.1.0;

/// Front-facing long-range radar ECU for adaptive cruise control
interface radar-front {
    /// Radar target detection
    record radar-target {
        target-id: u32,
        range: f32,              // meters
        range-rate: f32,         // m/s (closing velocity)
        azimuth-angle: f32,      // degrees (-60 to +60)
        elevation-angle: f32,    // degrees
        radar-cross-section: f32, // dBsm
        confidence: f32,
        target-type: target-type,
        velocity: velocity3d,
        acceleration: acceleration3d,
    }

    record velocity3d {
        vx: f32,
        vy: f32,
        vz: f32,
    }

    record acceleration3d {
        ax: f32,
        ay: f32,
        az: f32,
    }

    enum target-type {
        vehicle,
        motorcycle,
        truck,
        guardrail,
        bridge,
        stationary-object,
        moving-object,
        clutter,
        unknown,
    }

    /// Radar configuration
    record radar-config {
        frequency: f32,          // GHz (77-81 GHz)
        range-resolution: f32,   // meters
        velocity-resolution: f32, // m/s
        max-range: f32,          // meters
        field-of-view: f32,      // degrees
        update-rate: u32,        // Hz
        transmit-power: f32,     // dBm
        noise-figure: f32,       // dB
    }

    /// Radar calibration data
    record radar-calibration {
        azimuth-offset: f32,
        elevation-offset: f32,
        range-offset: f32,
        mounting-height: f32,
        mounting-angle: f32,
        antenna-gain: f32,
    }

    /// Environmental conditions affecting radar
    record environment-status {
        weather-condition: weather-type,
        temperature: f32,        // Celsius
        humidity: f32,           // percentage
        visibility: f32,         // meters
        precipitation-rate: f32, // mm/h
    }

    enum weather-type {
        clear,
        light-rain,
        heavy-rain,
        snow,
        fog,
        dust,
    }

    /// Radar performance metrics
    record performance-metrics {
        detection-range: f32,
        false-alarm-rate: f32,
        missed-detection-rate: f32,
        range-accuracy: f32,
        velocity-accuracy: f32,
        angular-accuracy: f32,
    }

    /// Radar system status
    enum radar-status {
        offline,
        initializing,
        active,
        degraded,
        blocked,
        overheating,
        error,
    }

    /// Track management for persistent objects
    record track-info {
        track-id: u32,
        target: radar-target,
        track-age: u32,          // frames
        prediction-covariance: list<f32>, // 6x6 matrix
        kalman-gain: list<f32>,
        track-quality: f32,
    }

    /// Interference detection and mitigation
    record interference-status {
        interference-detected: bool,
        interference-source: interference-type,
        signal-to-noise-ratio: f32,
        mitigation-active: bool,
    }

    enum interference-type {
        none,
        radar-radar,
        cellular,
        wifi,
        other-automotive,
        unknown,
    }

    /// Initialize radar system
    initialize: func(config: radar-config, calibration: radar-calibration) -> result<_, string>;

    /// Start radar scanning
    start-scanning: func() -> result<_, string>;

    /// Stop radar scanning
    stop-scanning: func() -> result<_, string>;

    /// Get detected targets
    get-targets: func() -> result<list<radar-target>, string>;

    /// Get tracked objects with persistent IDs
    get-tracks: func() -> result<list<track-info>, string>;

    /// Update radar configuration
    update-config: func(config: radar-config) -> result<_, string>;

    /// Get current radar status
    get-status: func() -> radar-status;

    /// Get performance metrics
    get-performance: func() -> performance-metrics;

    /// Set environment conditions for adaptation
    set-environment: func(env: environment-status) -> result<_, string>;

    /// Get interference status
    get-interference-status: func() -> interference-status;

    /// Perform radar calibration
    calibrate: func() -> result<radar-calibration, string>;

    /// Run built-in test
    run-self-test: func() -> result<test-results, string>;

    record test-results {
        transmitter-ok: bool,
        receiver-ok: bool,
        antenna-ok: bool,
        processing-ok: bool,
        temperature-in-range: bool,
        power-supply-ok: bool,
    }

    /// Adaptive filtering based on driving scenario
    set-scenario: func(scenario: driving-scenario) -> result<_, string>;

    enum driving-scenario {
        highway,
        city,
        parking,
        traffic-jam,
        construction-zone,
        tunnel,
    }
}

world radar-front-component {
    export radar-front;
}
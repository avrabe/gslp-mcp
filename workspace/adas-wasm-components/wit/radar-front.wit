/// Front Radar Component - EXPORTS radar data stream for ACC/AEB
package adas:radar-front@0.1.0;

world radar-front-component {
    /// Export radar data stream
    export radar-data: interface {
        /// Shared spatial types
        record position3d {
            x: f64,
            y: f64,
            z: f64,
        }

        record velocity3d {
            vx: f64,
            vy: f64,
            vz: f64,
            speed: f64,
        }

        record quaternion {
            x: f64,
            y: f64,
            z: f64,
            w: f64,
        }

        /// Radar data types
        record radar-scan {
            targets: list<radar-target>,
            timestamp: u64,
            scan-id: u32,
            sensor-pose: radar-pose,
        }

        record radar-target {
            position: position3d,
            velocity: velocity3d,
            range: f64,
            azimuth: f64,
            elevation: f64,
            rcs: f64,  // Radar Cross Section
            signal-strength: f64,
            confidence: f32,
        }

        record radar-pose {
            position: position3d,
            orientation: quaternion,
        }

        resource radar-stream {
            get-scan: func() -> result<radar-scan, string>;
            is-available: func() -> bool;
            get-range: func() -> f64;
        }
        
        create-stream: func() -> radar-stream;
    }
    
    /// Export radar control interface
    export radar-control: interface {
        /// Radar configuration
        record radar-config {
            frequency: frequency-band,
            power-level: power-level,
            scan-rate: u32,
            detection-range: f64,
            angular-resolution: f32,
            velocity-resolution: f32,
            interference-mitigation: bool,
        }

        enum frequency-band {
            seventy-seven-ghz,
            seventy-nine-ghz,
            twenty-four-ghz,
        }

        enum power-level {
            low,
            medium,
            high,
            adaptive,
        }

        enum radar-status {
            offline,
            initializing,
            calibrating,
            scanning,
            error,
            maintenance,
        }

        record diagnostic-result {
            rf-performance: test-result,
            antenna-integrity: test-result,
            signal-processing: test-result,
            target-tracking: test-result,
            interference-handling: test-result,
            overall-score: f32,
        }

        enum test-result {
            passed,
            failed,
            warning,
            not-tested,
        }

        /// Initialize radar system
        initialize: func(config: radar-config) -> result<_, string>;
        
        /// Start radar scanning
        start-scanning: func() -> result<_, string>;
        
        /// Stop radar scanning
        stop-scanning: func() -> result<_, string>;
        
        /// Update configuration
        update-config: func(config: radar-config) -> result<_, string>;
        
        /// Get system status
        get-status: func() -> radar-status;
        
        /// Run diagnostics
        run-diagnostic: func() -> result<diagnostic-result, string>;
    }
}
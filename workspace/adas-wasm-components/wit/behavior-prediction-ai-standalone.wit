package adas:behavior-prediction@0.1.0;

/// AI system for predicting human and vehicle behavior patterns
interface behavior-prediction {
    /// WASI-NN compatible types for neural network inference
    /// (Local definitions until WASI-NN runtime support is available)
    type nn-tensor-dimensions = list<u32>;
    
    enum nn-tensor-type {
        fp16, fp32, fp64, bf16, uint8, int32, int64
    }
    
    type nn-tensor-data = list<u8>;
    
    record nn-tensor {
        dimensions: nn-tensor-dimensions,
        tensor-type: nn-tensor-type,
        data: nn-tensor-data,
    }
    
    enum nn-graph-encoding {
        openvino, onnx, tensorflow, pytorch,
        tensorflowlite, ggml, autodetect
    }
    
    enum nn-execution-target {
        cpu, gpu, tpu
    }
    /// Behavior prediction for a tracked entity
    record behavior-prediction {
        entity-id: u32,
        entity-type: entity-type,
        current-behavior: behavior-state,
        predicted-behaviors: list<predicted-behavior>,
        confidence: f32,
        prediction-horizon: f32,
        context: behavior-context,
    }

    enum entity-type {
        driver,
        pedestrian,
        cyclist,
        vehicle,
        traffic-participant,
    }

    record behavior-state {
        behavior-type: behavior-type,
        behavior-confidence: f32,
        intention: intention-type,
        attention-level: attention-level,
        aggressiveness: aggressiveness-level,
        compliance: compliance-level,
    }

    enum behavior-type {
        following,
        lane-changing,
        turning,
        stopping,
        accelerating,
        yielding,
        crossing,
        waiting,
        erratic,
        unknown,
    }

    enum intention-type {
        continue-straight,
        turn-left,
        turn-right,
        change-lane-left,
        change-lane-right,
        stop,
        park,
        u-turn,
        merge,
        unknown,
    }

    enum attention-level {
        focused,
        moderate,
        distracted,
        very-distracted,
        unknown,
    }

    enum aggressiveness-level {
        passive,
        normal,
        aggressive,
        very-aggressive,
    }

    enum compliance-level {
        compliant,
        mostly-compliant,
        non-compliant,
        reckless,
    }

    record predicted-behavior {
        behavior-type: behavior-type,
        probability: f32,
        time-horizon: f32,
        expected-trajectory: list<trajectory-point>,
        risk-level: risk-level,
    }

    record trajectory-point {
        position: position2d,
        velocity: f32,
        heading: f32,
        timestamp: u64,
    }

    record position2d {
        x: f32,
        y: f32,
    }

    enum risk-level {
        minimal,
        low,
        moderate,
        high,
        critical,
    }

    record behavior-context {
        traffic-density: density-level,
        traffic-flow: flow-state,
        road-type: road-type,
        weather-impact: weather-impact,
        time-of-day: time-period,
        special-events: list<event-type>,
    }

    enum density-level {
        light,
        moderate,
        heavy,
        congested,
    }

    enum flow-state {
        free-flow,
        synchronized,
        stop-and-go,
        jammed,
    }

    enum road-type {
        urban-street,
        highway,
        intersection,
        parking-lot,
        residential,
        construction-zone,
    }

    enum weather-impact {
        none,
        slight,
        moderate,
        significant,
        severe,
    }

    enum time-period {
        morning-rush,
        midday,
        evening-rush,
        night,
        weekend,
    }

    enum event-type {
        school-zone,
        construction,
        accident,
        emergency-vehicles,
        special-event,
        road-closure,
    }

    /// Pedestrian-specific behavior analysis
    record pedestrian-behavior {
        crossing-intention: crossing-intention,
        path-prediction: list<trajectory-point>,
        interaction-awareness: awareness-level,
        group-behavior: group-dynamics,
        age-estimation: age-group,
        mobility-assessment: mobility-level,
    }

    enum crossing-intention {
        no-intention,
        considering,
        preparing,
        committed,
        crossing,
        hesitating,
    }

    enum awareness-level {
        fully-aware,
        partially-aware,
        unaware,
        distracted,
    }

    record group-dynamics {
        group-size: u32,
        leader-follower: bool,
        coordination-level: coordination-level,
    }

    enum coordination-level {
        synchronized,
        loosely-coordinated,
        independent,
        chaotic,
    }

    enum age-group {
        child,
        teen,
        adult,
        elderly,
        unknown,
    }

    enum mobility-level {
        normal,
        slow,
        impaired,
        assisted,
    }

    /// Vehicle behavior analysis
    record vehicle-behavior {
        driver-behavior: driver-profile,
        vehicle-dynamics: vehicle-dynamics,
        maneuver-prediction: maneuver-prediction,
        following-behavior: following-behavior,
    }

    record driver-profile {
        driving-style: driving-style,
        experience-level: experience-level,
        fatigue-level: fatigue-level,
        impairment-indicators: list<impairment-type>,
    }

    enum driving-style {
        conservative,
        normal,
        aggressive,
        erratic,
        uncertain,
    }

    enum experience-level {
        novice,
        intermediate,
        experienced,
        expert,
        unknown,
    }

    enum fatigue-level {
        alert,
        slightly-tired,
        tired,
        very-tired,
        drowsy,
    }

    enum impairment-type {
        none,
        distraction,
        substance,
        medical,
        emotional,
    }

    record vehicle-dynamics {
        acceleration-pattern: acceleration-pattern,
        braking-pattern: braking-pattern,
        steering-behavior: steering-behavior,
        speed-compliance: compliance-level,
    }

    enum acceleration-pattern {
        smooth,
        moderate,
        aggressive,
        erratic,
    }

    enum braking-pattern {
        gradual,
        sudden,
        late,
        early,
    }

    enum steering-behavior {
        stable,
        corrective,
        weaving,
        jerky,
    }

    record maneuver-prediction {
        predicted-maneuver: maneuver-type,
        confidence: f32,
        time-to-execute: f32,
        space-requirements: space-requirements,
    }

    enum maneuver-type {
        lane-keep,
        lane-change-left,
        lane-change-right,
        turn-left,
        turn-right,
        merge,
        overtake,
        stop,
        park,
        u-turn,
    }

    record space-requirements {
        lateral-space: f32,
        longitudinal-space: f32,
        time-gap: f32,
    }

    record following-behavior {
        following-distance: f32,
        time-headway: f32,
        gap-acceptance: gap-acceptance,
        reaction-time: f32,
    }

    enum gap-acceptance {
        conservative,
        normal,
        aggressive,
        risky,
    }

    /// System configuration
    record prediction-config {
        prediction-horizon: f32,
        update-frequency: u32,
        confidence-threshold: f32,
        context-analysis-enabled: bool,
        pedestrian-analysis-enabled: bool,
        vehicle-analysis-enabled: bool,
        ai-model-complexity: model-complexity,
    }

    enum model-complexity {
        basic,
        standard,
        advanced,
        research-grade,
    }

    enum prediction-status {
        offline,
        initializing,
        active,
        error,
        model-updating,
        degraded,
    }

    /// Initialize behavior prediction system
    initialize: func(config: prediction-config) -> result<_, string>;

    /// Start behavior prediction
    start-prediction: func() -> result<_, string>;

    /// Stop behavior prediction
    stop-prediction: func() -> result<_, string>;

    /// Predict behavior for entity
    predict-behavior: func(entity-id: u32, entity-type: entity-type, context: behavior-context) -> result<behavior-prediction, string>;

    /// Analyze pedestrian behavior
    analyze-pedestrian: func(entity-id: u32, context: behavior-context) -> result<pedestrian-behavior, string>;

    /// Analyze vehicle behavior
    analyze-vehicle: func(entity-id: u32, context: behavior-context) -> result<vehicle-behavior, string>;

    /// Update behavior context
    update-context: func(context: behavior-context) -> result<_, string>;

    /// Get prediction status
    get-status: func() -> prediction-status;

    /// Update configuration
    update-config: func(config: prediction-config) -> result<_, string>;

    /// Run system diagnostic
    run-diagnostic: func() -> result<diagnostic-result, string>;

    record diagnostic-result {
        prediction-accuracy: f32,
        processing-latency: u32,
        model-performance: f32,
        memory-usage: u32,
        active-predictions: u32,
        false-positive-rate: f32,
        false-negative-rate: f32,
    }

}

world behavior-prediction-component {
    /// WASI-NN support prepared for future integration
    /// Currently using local type definitions
    export behavior-prediction;
}
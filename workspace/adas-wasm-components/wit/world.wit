package adas:core@0.1.0;

/// Main world definition for ADAS system components
world adas-system {
    /// Import sensor fusion capabilities
    import adas:sensor-fusion/fusion;
    import adas:sensor-fusion/types;

    /// Import localization capabilities
    import adas:localization/localization;

    /// Import perception capabilities
    import adas:perception/perception;

    /// Import planning capabilities
    import adas:planning/planning;

    /// Import control capabilities
    import adas:control/control;

    /// System-level coordination interface
    export coordinator: interface {
        use adas:sensor-fusion/types.{timestamp, pose, vehicle-state};
        use adas:perception/perception.{scene-understanding};
        use adas:planning/planning.{trajectory, planning-status};
        use adas:control/control.{control-command, control-status};
        use adas:localization/localization.{localization-result, localization-status};

        /// Overall system state
        enum system-state {
            offline,
            initializing,
            standby,
            autonomous,
            manual,
            degraded,
            emergency,
            fault,
        }

        /// System health information
        record system-health {
            timestamp: timestamp,
            state: system-state,
            localization-status: localization-status,
            perception-health: f32, // 0.0 to 1.0
            planning-status: planning-status,
            control-status: control-status,
            sensor-health: list<sensor-health>,
            overall-confidence: f32,
        }

        record sensor-health {
            sensor-id: string,
            health-score: f32, // 0.0 to 1.0
            last-update: timestamp,
            error-count: u32,
        }

        /// High-level mission command
        record mission-command {
            command-kind: mission-type,
            destination: option<pose>,
            max-speed: option<f32>,
            behavior-mode: behavior-mode,
            safety-level: safety-level,
        }

        enum mission-type {
            go-to-destination,
            follow-route,
            park,
            emergency-stop,
            return-home,
        }

        enum behavior-mode {
            eco,
            comfort,
            normal,
            sport,
            emergency,
        }

        enum safety-level {
            standard,
            conservative,
            aggressive,
        }

        /// Initialize the entire ADAS system
        initialize-system: func() -> result<_, string>;

        /// Start autonomous driving mode
        start-autonomous: func(mission: mission-command) -> result<_, string>;

        /// Stop autonomous driving and return control
        stop-autonomous: func() -> result<_, string>;

        /// Get current system health
        get-system-health: func() -> system-health;

        /// Execute one complete ADAS cycle
        execute-cycle: func(timestamp: timestamp) -> result<control-command, string>;

        /// Handle emergency situation
        handle-emergency: func(emergency-kind: emergency-type) -> result<_, string>;

        enum emergency-type {
            obstacle-collision-imminent,
            sensor-failure,
            communication-loss,
            actuator-failure,
            unknown,
        }

        /// Update system configuration
        update-config: func(config-data: list<u8>) -> result<_, string>;

        /// Get diagnostic information
        get-diagnostics: func() -> list<diagnostic-message>;

        record diagnostic-message {
            timestamp: timestamp,
            severity: diagnostic-severity,
            component: string,
            code: u32,
            message: string,
            data: option<list<u8>>,
        }

        enum diagnostic-severity {
            info,
            warning,
            error,
            critical,
        }
    }
}

/// World for individual component development and testing
world component-test {
    /// Import dependencies based on component type
    import adas:sensor-fusion/types;
    
    /// Export the component being tested
    export test-interface: interface {
        /// Generic test function
        run-test: func(test-name: string, test-data: list<u8>) -> result<list<u8>, string>;
        
        /// Get component metadata
        get-metadata: func() -> component-metadata;
        
        record component-metadata {
            name: string,
            version: string,
            description: string,
            author: string,
            license: string,
            dependencies: list<string>,
        }
    }
}

/// World for sensor simulation and testing
world sensor-simulator {
    import adas:sensor-fusion/types;
    
    export simulator: interface {
        use adas:sensor-fusion/types.{
            camera-data, lidar-data, radar-data, imu-data, gnss-data, timestamp
        };
        
        /// Initialize simulation environment
        init-simulation: func(scenario-file: string) -> result<_, string>;
        
        /// Step simulation forward
        step-simulation: func(dt: f32) -> result<_, string>;
        
        /// Get simulated sensor data
        get-camera-data: func() -> result<camera-data, string>;
        get-lidar-data: func() -> result<lidar-data, string>;
        get-radar-data: func() -> result<radar-data, string>;
        get-imu-data: func() -> result<imu-data, string>;
        get-gnss-data: func() -> result<gnss-data, string>;
        
        /// Set simulation parameters
        set-weather: func(condition: weather-condition) -> result<_, string>;
        set-traffic-density: func(density: f32) -> result<_, string>;
        
        enum weather-condition {
            clear,
            rain,
            snow,
            fog,
        }
    }
}
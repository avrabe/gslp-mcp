/// FEO Demo Component - Demonstrates Fixed Execution Order system
package adas:feo-demo@0.1.0;

world feo-demo-component {
    import wasi:cli/environment@0.2.3;
    import wasi:cli/exit@0.2.3;
    import wasi:io/streams@0.2.3;
    import wasi:cli/stdout@0.2.3;
    import wasi:cli/stderr@0.2.3;
    import wasi:clocks/monotonic-clock@0.2.3;
    import wasi:clocks/wall-clock@0.2.3;

    /// Import FEO execution control (all components need this)
    import adas:execution-control/execution-control@0.1.0;

    /// Export demo data interface
    export demo-data: interface {
        record demo-message {
            message-id: u32,
            content: string,
            timestamp: u64,
            processing-stage: processing-stage,
        }

        enum processing-stage {
            input,
            processing,
            output,
            complete,
        }

        record demo-metrics {
            messages-processed: u32,
            total-processing-time: u64,
            average-latency: f32,
            error-count: u32,
        }

        /// Get latest demo message
        get-message: func() -> result<demo-message, string>;
        
        /// Get processing metrics
        get-metrics: func() -> demo-metrics;
        
        /// Check if demo is active
        is-active: func() -> bool;
    }

    /// Export demo control interface
    export demo-control: interface {
        record demo-config {
            message-frequency: u32,    // Messages per second
            processing-delay: u32,     // Artificial delay in ms
            error-simulation: bool,    // Simulate occasional errors
            verbose-logging: bool,
        }

        enum demo-status {
            stopped,
            starting,
            running,
            stopping,
            error,
        }

        /// Initialize demo
        initialize: func(config: demo-config) -> result<_, string>;
        
        /// Start demo
        start-demo: func() -> result<_, string>;
        
        /// Stop demo
        stop-demo: func() -> result<_, string>;
        
        /// Update configuration
        update-config: func(config: demo-config) -> result<_, string>;
        
        /// Get status
        get-status: func() -> demo-status;
        
        /// Reset metrics
        reset-metrics: func() -> result<_, string>;
    }
}
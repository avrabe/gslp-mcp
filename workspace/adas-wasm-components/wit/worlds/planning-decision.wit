/// Planning & Decision Component - IMPORTS predictions & fusion, EXPORTS trajectory plans
package adas:planning-decision@0.1.0;

world planning-decision-component {
    import wasi:cli/environment@0.2.3;
    import wasi:cli/exit@0.2.3;
    import wasi:io/streams@0.2.3;
    import wasi:cli/stdout@0.2.3;
    import wasi:cli/stderr@0.2.3;
    import wasi:clocks/monotonic-clock@0.2.3;
    import wasi:clocks/wall-clock@0.2.3;

    /// Import fusion data for environment model
    import adas:sensor-fusion/fusion-data@0.1.0;
    
    /// Import predictions
    import adas:prediction-data/tracking-data@0.1.0;
    import adas:prediction-data/behavior-data@0.1.0;
    
    /// Import lane information
    import adas:lane-data/lane-data@0.1.0;
    
    /// Import traffic signs
    import adas:traffic-sign-data/traffic-sign-data@0.1.0;
    
    /// Export planning data
    export adas:planning-data/planning-data@0.1.0;
    
    /// Planning control interface
    export planning-control: interface {
        /// Initialize planning system
        initialize: func(config: planning-config) -> result<_, string>;
        
        /// Start planning
        start-planning: func() -> result<_, string>;
        
        /// Stop planning
        stop-planning: func() -> result<_, string>;
        
        /// Set destination
        set-destination: func(destination: destination) -> result<_, string>;
        
        /// Update configuration
        update-config: func(config: planning-config) -> result<_, string>;
        
        /// Get status
        get-status: func() -> planning-status;
    }

    /// Planning configuration
    record planning-config {
        planner-type: planner-type,
        behavior-config: behavior-config,
        trajectory-config: trajectory-config,
        safety-config: safety-config,
    }

    enum planner-type {
        lattice,
        rrt-star,
        a-star,
        model-predictive,
        hybrid,
    }

    record behavior-config {
        driving-style: driving-style,
        lane-change-policy: lane-change-policy,
        following-policy: following-policy,
    }

    enum driving-style {
        conservative,
        normal,
        assertive,
        emergency,
    }

    enum lane-change-policy {
        stay-in-lane,
        efficient,
        opportunistic,
        mandatory-only,
    }

    record following-policy {
        time-gap: f32,         // seconds
        min-distance: f32,     // meters
        comfort-decel: f32,    // m/sÂ²
    }

    record trajectory-config {
        time-horizon: f32,
        spatial-horizon: f32,
        resolution: f32,
        optimization-iterations: u32,
    }

    record safety-config {
        collision-time-threshold: f32,
        safety-distance-lateral: f32,
        safety-distance-longitudinal: f32,
        max-acceleration: f32,
        max-deceleration: f32,
        max-jerk: f32,
    }

    record destination {
        position: position3d,
        heading: option<f32>,
        arrival-time: option<u64>,
    }

    use adas:sensor-data/spatial-types.{position3d};

    enum planning-status {
        offline,
        initializing,
        planning,
        replanning,
        error,
    }
}
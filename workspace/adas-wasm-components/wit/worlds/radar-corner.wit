/// Corner Radar Component - EXPORTS radar data stream
package adas:radar-corner@0.1.0;

world radar-corner-component {
    import wasi:cli/environment@0.2.3;
    import wasi:cli/exit@0.2.3;
    import wasi:io/streams@0.2.3;
    import wasi:cli/stdout@0.2.3;
    import wasi:cli/stderr@0.2.3;
    import wasi:clocks/monotonic-clock@0.2.3;
    import wasi:clocks/wall-clock@0.2.3;

    /// Import FEO execution control (all components need this)
    import adas:execution-control/execution-control@0.1.0;

    /// Export the radar data stream for other components to consume
    export adas:sensor-data/radar-data@0.1.0;
    
    /// Radar control interface for configuration and control
    export radar-control: interface {
        /// Initialize radar with configuration
        initialize: func(config: radar-config) -> result<_, string>;
        
        /// Start radar scanning
        start-scanning: func() -> result<_, string>;
        
        /// Stop radar scanning  
        stop-scanning: func() -> result<_, string>;
        
        /// Update radar configuration
        update-config: func(config: radar-config) -> result<_, string>;
        
        /// Get radar status
        get-status: func() -> radar-status;
        
        /// Run radar diagnostics
        run-diagnostic: func() -> result<diagnostic-result, string>;
    }

    /// Corner radar configuration (optimized for side/rear detection)
    record radar-config {
        range-mode: range-mode,
        scan-pattern: scan-pattern,
        power-mode: power-mode,
        tracking-mode: tracking-mode,
        frequency-band: frequency-band,
        corner-position: corner-position,
    }

    enum range-mode {
        short-range,    // 0-30m (parking assistance)
        medium-range,   // 0-60m (lane change assist)
        adaptive,       // Dynamic based on speed
    }

    enum scan-pattern {
        narrow-beam,    // ±20°
        wide-angle,     // ±80°
        adaptive,       // Speed-dependent
    }

    enum power-mode {
        low-power,
        standard,
        high-sensitivity,
    }

    enum tracking-mode {
        single-target,
        multi-target,
        blind-spot-optimized,
    }

    enum frequency-band {
        band-twenty-four-ghz,
        band-seventy-seven-ghz,
        band-seventy-nine-ghz,
    }

    enum corner-position {
        front-left,
        front-right,
        rear-left,
        rear-right,
    }

    enum radar-status {
        offline,
        initializing,
        scanning,
        error,
        maintenance,
    }

    record diagnostic-result {
        transmitter-health: test-result,
        receiver-health: test-result,
        antenna-health: test-result,
        signal-processing: test-result,
        calibration-status: test-result,
        blind-spot-detection: test-result,
        overall-score: f32,
    }

    enum test-result {
        passed,
        failed,
        warning,
        not-tested,
    }
}
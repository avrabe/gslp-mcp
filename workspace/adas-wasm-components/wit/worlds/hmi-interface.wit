/// HMI Interface Component - IMPORTS system data, EXPORTS user interface
package adas:hmi-interface@0.1.0;

world hmi-interface-component {
    import wasi:cli/environment@0.2.3;
    import wasi:cli/exit@0.2.3;
    import wasi:io/streams@0.2.3;
    import wasi:cli/stdout@0.2.3;
    import wasi:cli/stderr@0.2.3;
    import wasi:clocks/monotonic-clock@0.2.3;
    import wasi:clocks/wall-clock@0.2.3;

    /// Import system data streams
    import adas:sensor-fusion/fusion-data@0.1.0;
    import adas:vehicle-control/vehicle-commands@0.1.0;
    import adas:sensor-data/detection-data@0.1.0;
    
    /// Export user interface data
    export user-interface: interface {
        /// Get current display content for ADAS visualization
        get-adas-display: func() -> result<adas-display, string>;
        
        /// Get navigation overlay data
        get-navigation-overlay: func() -> result<navigation-overlay, string>;
        
        /// Get warning/alert information
        get-active-warnings: func() -> result<list<warning-display>, string>;
        
        /// Get system status information
        get-system-status: func() -> result<system-status, string>;
        
        /// Check if interface is ready
        is-ready: func() -> bool;
    }
    
    /// User input interface - for receiving user commands
    export user-input: interface {
        /// Process user touch input
        process-touch-input: func(input: touch-input) -> result<_, string>;
        
        /// Process user voice input
        process-voice-input: func(input: voice-input) -> result<_, string>;
        
        /// Process user gesture input
        process-gesture-input: func(input: gesture-input) -> result<_, string>;
        
        /// Process physical button input
        process-button-input: func(input: button-input) -> result<_, string>;
    }
    
    /// HMI control interface
    export hmi-control: interface {
        /// Initialize HMI system
        initialize: func(config: hmi-config) -> result<_, string>;
        
        /// Start HMI interface
        start-interface: func() -> result<_, string>;
        
        /// Stop HMI interface
        stop-interface: func() -> result<_, string>;
        
        /// Update HMI configuration
        update-config: func(config: hmi-config) -> result<_, string>;
        
        /// Get HMI status
        get-status: func() -> hmi-status;
        
        /// Take screenshot of display
        take-screenshot: func(display-id: u32) -> result<image-data, string>;
        
        /// Run HMI diagnostics
        run-diagnostic: func() -> result<diagnostic-result, string>;
    }

    /// ADAS display content
    record adas-display {
        detected-objects: list<display-object>,
        vehicle-path: list<path-point>,
        free-space-visualization: free-space-display,
        speed-limit: option<u32>,
        current-speed: f32,
        cruise-control-status: cruise-status,
        lane-departure-warning: bool,
        collision-warning: collision-warning-level,
        timestamp: u64,
    }

    record display-object {
        object-id: u32,
        object-type: object-type,
        screen-position: screen-position,
        bounding-box: screen-rectangle,
        confidence: f32,
        distance: f32,
        relative-velocity: f32,
        warning-level: warning-level,
    }

    record path-point {
        screen-position: screen-position,
        confidence: f32,
    }

    record free-space-display {
        free-areas: list<screen-polygon>,
        occupied-areas: list<screen-polygon>,
        uncertain-areas: list<screen-polygon>,
    }

    record screen-position {
        x: u32,
        y: u32,
    }

    record screen-rectangle {
        x: u32,
        y: u32,
        width: u32,
        height: u32,
    }

    record screen-polygon {
        points: list<screen-position>,
    }

    /// Navigation overlay
    record navigation-overlay {
        route-points: list<navigation-point>,
        turn-instructions: list<turn-instruction>,
        distance-to-destination: f32,
        estimated-arrival-time: u64,
        current-road: string,
        speed-limit: option<u32>,
    }

    record navigation-point {
        screen-position: screen-position,
        road-type: road-type,
    }

    record turn-instruction {
        direction: turn-direction,
        distance: f32,
        road-name: string,
        icon: navigation-icon,
    }

    /// Warning and alert displays
    record warning-display {
        warning-id: u32,
        warning-type: warning-type,
        severity: warning-severity,
        message: string,
        icon: warning-icon,
        action-required: bool,
        auto-dismiss: bool,
        timestamp: u64,
    }

    /// User input types
    record touch-input {
        position: screen-position,
        input-type: touch-type,
        timestamp: u64,
    }

    record voice-input {
        command: string,
        confidence: f32,
        timestamp: u64,
    }

    record gesture-input {
        gesture-type: gesture-type,
        confidence: f32,
        timestamp: u64,
    }

    record button-input {
        button-id: u32,
        action: button-action,
        timestamp: u64,
    }

    /// HMI configuration
    record hmi-config {
        display-brightness: u32,
        theme: display-theme,
        language: string,
        units: unit-system,
        warning-settings: warning-settings,
        audio-settings: audio-settings,
    }

    record warning-settings {
        enable-audio-alerts: bool,
        enable-haptic-feedback: bool,
        warning-volume: u32,
        critical-only: bool,
    }

    record audio-settings {
        master-volume: u32,
        voice-guidance: bool,
        beep-volume: u32,
        enable-spatial-audio: bool,
    }

    /// System status
    record system-status {
        adas-status: adas-system-status,
        sensor-status: list<sensor-status>,
        vehicle-status: vehicle-system-status,
        communication-status: communication-status,
        overall-health: system-health,
    }

    record adas-system-status {
        autonomous-level: autonomy-level,
        systems-active: list<adas-system>,
        degraded-systems: list<adas-system>,
        failed-systems: list<adas-system>,
    }

    record sensor-status {
        sensor-type: sensor-type,
        status: component-status,
        confidence: f32,
        last-update: u64,
    }

    record vehicle-system-status {
        engine-status: component-status,
        brake-status: component-status,
        steering-status: component-status,
        transmission-status: component-status,
    }

    record communication-status {
        can-bus-status: component-status,
        ethernet-status: component-status,
        wireless-status: component-status,
    }

    /// Image data for screenshots
    record image-data {
        width: u32,
        height: u32,
        format: image-format,
        data: list<u8>,
        timestamp: u64,
    }

    /// Enums
    use adas:sensor-data/detection-data.{object-type};

    enum warning-level {
        none,
        info,
        caution,
        warning,
        critical,
    }

    enum cruise-status {
        off,
        standby,
        active,
        override,
        error,
    }

    enum collision-warning-level {
        none,
        pre-warning,
        warning,
        imminent,
        unavoidable,
    }

    enum road-type {
        highway,
        arterial,
        residential,
        parking,
        off-road,
    }

    enum turn-direction {
        straight,
        slight-left,
        left,
        sharp-left,
        slight-right,
        right,
        sharp-right,
        u-turn,
    }

    enum navigation-icon {
        arrow-straight,
        arrow-left,
        arrow-right,
        arrow-u-turn,
        destination,
        waypoint,
    }

    enum warning-type {
        collision-imminent,
        lane-departure,
        blind-spot,
        cross-traffic,
        pedestrian-alert,
        speed-limit,
        traffic-sign,
        system-malfunction,
        maintenance-required,
    }

    enum warning-severity {
        info,
        low,
        medium,
        high,
        critical,
    }

    enum warning-icon {
        collision,
        pedestrian,
        vehicle,
        speed,
        maintenance,
        warning-triangle,
        error,
    }

    enum touch-type {
        tap,
        double-tap,
        long-press,
        swipe-up,
        swipe-down,
        swipe-left,
        swipe-right,
        pinch-zoom,
        spread-zoom,
    }

    enum gesture-type {
        wave,
        point,
        thumbs-up,
        thumbs-down,
        stop,
        ok,
    }

    enum button-action {
        press,
        release,
        hold,
    }

    enum display-theme {
        light,
        dark,
        auto,
        high-contrast,
    }

    enum unit-system {
        metric,
        imperial,
        mixed,
    }

    enum autonomy-level {
        manual,
        level-one,
        level-two,
        level-three,
        level-four,
        level-five,
    }

    enum adas-system {
        adaptive-cruise-control,
        lane-keeping-assist,
        automatic-emergency-braking,
        blind-spot-monitoring,
        cross-traffic-alert,
        parking-assist,
        traffic-sign-recognition,
    }

    enum sensor-type {
        camera,
        radar,
        lidar,
        ultrasonic,
        gps,
        imu,
    }

    enum component-status {
        ok,
        warning,
        error,
        offline,
        maintenance,
    }

    enum system-health {
        excellent,
        good,
        fair,
        poor,
        critical,
    }

    enum hmi-status {
        offline,
        initializing,
        active,
        standby,
        error,
        maintenance,
    }

    enum image-format {
        png,
        jpeg,
        bmp,
        rgba8,
    }

    record diagnostic-result {
        display-test: test-result,
        touch-test: test-result,
        audio-test: test-result,
        communication-test: test-result,
        performance-test: test-result,
        overall-score: f32,
    }

    enum test-result {
        passed,
        failed,
        warning,
        not-tested,
    }
}
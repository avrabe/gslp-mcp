/// Lane Detection AI Component - IMPORTS camera data & wasi-nn, EXPORTS lane data
package adas:lane-detection-ai@0.1.0;

world lane-detection-component {
    import wasi:cli/environment@0.2.3;
    import wasi:cli/exit@0.2.3;
    import wasi:io/streams@0.2.3;
    import wasi:cli/stdout@0.2.3;
    import wasi:cli/stderr@0.2.3;
    import wasi:clocks/monotonic-clock@0.2.3;
    import wasi:clocks/wall-clock@0.2.3;

    /// Import camera data from camera components
    import adas:sensor-data/camera-data@0.1.0;
    
    /// Import WASI-NN for neural network inference
    import wasi:nn/graph@0.2.0;
    import wasi:nn/tensor@0.2.0;
    import wasi:nn/inference@0.2.0;
    
    /// Export lane detection results
    export adas:lane-data/lane-data@0.1.0;
    
    /// AI control interface for lane detection
    export ai-control: interface {
        /// Initialize AI system with model and configuration
        initialize: func(config: ai-config) -> result<_, string>;
        
        /// Load neural network model
        load-model: func(model-path: string) -> result<_, string>;
        
        /// Start lane detection processing
        start-detection: func() -> result<_, string>;
        
        /// Stop lane detection processing
        stop-detection: func() -> result<_, string>;
        
        /// Update AI configuration
        update-config: func(config: ai-config) -> result<_, string>;
        
        /// Get AI system status
        get-status: func() -> ai-status;
        
        /// Get performance metrics
        get-performance: func() -> performance-metrics;
    }

    /// AI system configuration
    record ai-config {
        model-path: string,
        confidence-threshold: f32,
        detection-range: f32, // meters ahead
        roi-config: roi-config,
        post-processing: post-processing-config,
    }

    record roi-config {
        top-offset: u32,    // Pixels from top to start ROI
        bottom-offset: u32, // Pixels from bottom to end ROI
        horizon-line: f32,  // Estimated horizon position (0-1)
    }

    record post-processing-config {
        smoothing-enabled: bool,
        temporal-filtering: bool,
        curve-fitting: curve-fit-method,
    }

    enum curve-fit-method {
        linear,
        quadratic,
        cubic,
        spline,
    }

    enum ai-status {
        offline,
        initializing,
        loading-model,
        ready,
        processing,
        error,
    }

    record performance-metrics {
        inference-time-ms: f32,
        fps: f32,
        lanes-detected: u32,
        confidence-avg: f32,
        cpu-usage-percent: f32,
        memory-usage-mb: u32,
    }
}
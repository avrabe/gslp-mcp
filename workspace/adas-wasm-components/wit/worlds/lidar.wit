/// LiDAR Component - EXPORTS lidar point cloud data
package adas:lidar@0.1.0;

world lidar-component {
    import wasi:cli/environment@0.2.3;
    import wasi:cli/exit@0.2.3;
    import wasi:io/streams@0.2.3;
    import wasi:cli/stdout@0.2.3;
    import wasi:cli/stderr@0.2.3;
    import wasi:clocks/monotonic-clock@0.2.3;
    import wasi:clocks/wall-clock@0.2.3;

    /// Export the LiDAR data stream for other components to consume
    export adas:sensor-data/lidar-data@0.1.0;
    
    /// LiDAR control interface for configuration and control
    export lidar-control: interface {
        /// Initialize LiDAR with configuration
        initialize: func(config: lidar-config) -> result<_, string>;
        
        /// Start LiDAR scanning
        start-scanning: func() -> result<_, string>;
        
        /// Stop LiDAR scanning  
        stop-scanning: func() -> result<_, string>;
        
        /// Update LiDAR configuration
        update-config: func(config: lidar-config) -> result<_, string>;
        
        /// Get LiDAR status
        get-status: func() -> lidar-status;
        
        /// Run LiDAR diagnostics
        run-diagnostic: func() -> result<diagnostic-result, string>;
    }

    /// LiDAR configuration
    record lidar-config {
        scan-mode: scan-mode,
        resolution: resolution-mode,
        rotation-rate: u32, // RPM
        fov: field-of-view,
        return-mode: return-mode,
    }

    enum scan-mode {
        rotating-360,
        oscillating,
        solid-state,
        flash,
    }

    enum resolution-mode {
        low,      // 16 channels
        medium,   // 32 channels
        high,     // 64 channels
        ultra,    // 128+ channels
    }

    record field-of-view {
        horizontal: f32, // degrees
        vertical: f32,   // degrees
    }

    enum return-mode {
        strongest,
        last,
        dual,
        triple,
    }

    enum lidar-status {
        offline,
        initializing,
        warming-up,
        scanning,
        error,
        maintenance,
    }

    record diagnostic-result {
        laser-health: test-result,
        detector-health: test-result,
        motor-health: test-result,
        temperature-status: test-result,
        calibration-status: test-result,
        overall-score: f32,
    }

    enum test-result {
        passed,
        failed,
        warning,
        not-tested,
    }
}
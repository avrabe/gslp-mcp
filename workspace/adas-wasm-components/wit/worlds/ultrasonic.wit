/// Ultrasonic Sensor Component - EXPORTS ultrasonic data stream
package adas:ultrasonic@0.1.0;

world ultrasonic-component {
    import wasi:cli/environment@0.2.3;
    import wasi:cli/exit@0.2.3;
    import wasi:io/streams@0.2.3;
    import wasi:cli/stdout@0.2.3;
    import wasi:cli/stderr@0.2.3;
    import wasi:clocks/monotonic-clock@0.2.3;
    import wasi:clocks/wall-clock@0.2.3;

    /// Import FEO execution control (all components need this)
    import adas:execution-control/execution-control@0.1.0;

    /// Export ultrasonic data interface
    export ultrasonic-data: interface {
        record ultrasonic-measurement {
            sensor-id: u8,
            distance: f32,          // Distance in meters
            confidence: f32,        // 0.0 to 1.0
            timestamp: u64,
            sensor-position: sensor-position,
            object-detected: bool,
        }

        record ultrasonic-array {
            measurements: list<ultrasonic-measurement>,
            timestamp: u64,
            array-status: array-status,
        }

        enum sensor-position {
            front-left,
            front-center-left,
            front-center-right,
            front-right,
            rear-left,
            rear-center-left,
            rear-center-right,
            rear-right,
        }

        enum array-status {
            all-active,
            partial-active,
            degraded,
            offline,
        }

        resource ultrasonic-stream {
            get-measurements: func() -> result<ultrasonic-array, string>;
            get-single-sensor: func(sensor-id: u8) -> result<ultrasonic-measurement, string>;
            is-available: func() -> bool;
        }
        
        create-stream: func() -> ultrasonic-stream;
    }
    
    /// Ultrasonic control interface
    export ultrasonic-control: interface {
        record ultrasonic-config {
            measurement-frequency: u32,     // Hz
            detection-range: range-config,
            sensor-sensitivity: f32,
            noise-filtering: bool,
            temperature-compensation: bool,
        }

        record range-config {
            min-distance: f32,      // meters
            max-distance: f32,      // meters
        }

        enum ultrasonic-status {
            offline,
            initializing,
            active,
            error,
            maintenance,
        }

        record diagnostic-result {
            sensor-health: list<sensor-health>,
            array-calibration: test-result,
            temperature-compensation: test-result,
            overall-score: f32,
        }

        record sensor-health {
            sensor-id: u8,
            status: test-result,
            signal-quality: f32,
        }

        enum test-result {
            passed,
            failed,
            warning,
            not-tested,
        }

        /// Initialize ultrasonic array
        initialize: func(config: ultrasonic-config) -> result<_, string>;
        
        /// Start measurements
        start-measurements: func() -> result<_, string>;
        
        /// Stop measurements
        stop-measurements: func() -> result<_, string>;
        
        /// Update configuration
        update-config: func(config: ultrasonic-config) -> result<_, string>;
        
        /// Get system status
        get-status: func() -> ultrasonic-status;
        
        /// Run diagnostics
        run-diagnostic: func() -> result<diagnostic-result, string>;
    }
}
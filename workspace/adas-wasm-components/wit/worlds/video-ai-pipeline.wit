/// Video AI Pipeline Component - IMPORTS video frames, EXPORTS AI analysis results
package adas:video-ai-pipeline@0.1.0;

world video-ai-pipeline-component {
    import wasi:cli/environment@0.2.3;
    import wasi:cli/exit@0.2.3;
    import wasi:io/streams@0.2.3;
    import wasi:cli/stdout@0.2.3;
    import wasi:cli/stderr@0.2.3;
    import wasi:clocks/monotonic-clock@0.2.3;
    import wasi:clocks/wall-clock@0.2.3;

    /// Import FEO execution control (all components need this)
    import adas:execution-control/execution-control@0.1.0;

    /// Import video data for processing
    import video-input: interface {
        record video-frame {
            width: u32,
            height: u32,
            data: list<u8>,
            format: pixel-format,
            timestamp: u64,
        }

        enum pixel-format {
            rgb8,
            rgba8,
            yuv420,
        }

        get-frame: func() -> result<video-frame, string>;
    }

    /// Export AI analysis results
    export ai-analysis: interface {
        record analysis-result {
            frame-timestamp: u64,
            detections: list<object-detection>,
            lane-markings: list<lane-marking>,
            traffic-signs: list<traffic-sign>,
            processing-time: f32,
            confidence: f32,
        }

        record object-detection {
            object-id: u32,
            classification: object-class,
            bounding-box: bounding-box,
            confidence: f32,
            attributes: list<attribute>,
        }

        record bounding-box {
            x: f32,
            y: f32,
            width: f32,
            height: f32,
        }

        record lane-marking {
            lane-id: u32,
            points: list<point2d>,
            lane-type: lane-type,
            confidence: f32,
        }

        record point2d {
            x: f32,
            y: f32,
        }

        record traffic-sign {
            sign-id: u32,
            sign-type: sign-type,
            location: bounding-box,
            confidence: f32,
        }

        record attribute {
            name: string,
            value: string,
            confidence: f32,
        }

        enum object-class {
            vehicle,
            pedestrian,
            cyclist,
            motorcycle,
            truck,
            bus,
            unknown,
        }

        enum lane-type {
            solid,
            dashed,
            double-solid,
            unknown,
        }

        enum sign-type {
            stop,
            yield,
            speed-limit,
            warning,
            information,
            unknown,
        }

        /// Get latest analysis results
        get-analysis: func() -> result<analysis-result, string>;
        
        /// Check if analysis is available
        is-ready: func() -> bool;
    }

    /// Export pipeline control interface
    export pipeline-control: interface {
        record pipeline-config {
            ai-models: list<ai-model-config>,
            processing-mode: processing-mode,
            output-format: output-format,
            performance-target: performance-target,
        }

        record ai-model-config {
            model-name: string,
            model-path: string,
            confidence-threshold: f32,
            enabled: bool,
        }

        enum processing-mode {
            realtime,
            batch,
            adaptive,
        }

        enum output-format {
            json,
            binary,
            protobuf,
        }

        enum performance-target {
            accuracy,
            speed,
            balanced,
        }

        enum pipeline-status {
            offline,
            loading,
            active,
            error,
            maintenance,
        }

        /// Initialize pipeline
        initialize: func(config: pipeline-config) -> result<_, string>;
        
        /// Start processing
        start-processing: func() -> result<_, string>;
        
        /// Stop processing
        stop-processing: func() -> result<_, string>;
        
        /// Update configuration
        update-config: func(config: pipeline-config) -> result<_, string>;
        
        /// Get status
        get-status: func() -> pipeline-status;
    }
}
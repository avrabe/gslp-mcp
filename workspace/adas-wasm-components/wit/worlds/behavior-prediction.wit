/// Behavior Prediction Component - IMPORTS tracking data & wasi-nn, EXPORTS behavior predictions
package adas:behavior-prediction@0.1.0;

world behavior-prediction-component {
    import wasi:cli/environment@0.2.3;
    import wasi:cli/exit@0.2.3;
    import wasi:io/streams@0.2.3;
    import wasi:cli/stdout@0.2.3;
    import wasi:cli/stderr@0.2.3;
    import wasi:clocks/monotonic-clock@0.2.3;
    import wasi:clocks/wall-clock@0.2.3;

    /// Import tracked objects
    import adas:prediction-data/tracking-data@0.1.0;
    
    /// Import lane data for context
    import adas:lane-data/lane-data@0.1.0;
    
    /// Import WASI-NN for behavior models
    import wasi:nn/graph@0.2.0;
    import wasi:nn/tensor@0.2.0;
    import wasi:nn/inference@0.2.0;
    
    /// Export behavior predictions
    export adas:prediction-data/behavior-data@0.1.0;
    
    /// Behavior prediction control
    export behavior-control: interface {
        /// Initialize behavior prediction
        initialize: func(config: behavior-config) -> result<_, string>;
        
        /// Load behavior model
        load-model: func(model-path: string) -> result<_, string>;
        
        /// Start prediction
        start-prediction: func() -> result<_, string>;
        
        /// Stop prediction
        stop-prediction: func() -> result<_, string>;
        
        /// Update configuration
        update-config: func(config: behavior-config) -> result<_, string>;
        
        /// Get status
        get-status: func() -> prediction-status;
    }

    /// Behavior prediction configuration
    record behavior-config {
        model-type: behavior-model-type,
        prediction-horizon: f32,
        context-window: f32,
        confidence-threshold: f32,
        scenario-awareness: scenario-config,
    }

    enum behavior-model-type {
        rule-based,
        lstm,
        transformer,
        graph-neural-network,
        hybrid,
    }

    record scenario-config {
        use-map-data: bool,
        use-traffic-rules: bool,
        cultural-driving-model: driving-culture,
    }

    enum driving-culture {
        conservative,
        normal,
        aggressive,
        mixed,
    }

    enum prediction-status {
        offline,
        initializing,
        predicting,
        error,
    }
}
/// Tracking & Prediction Component - IMPORTS fusion data & wasi-nn, EXPORTS predictions
package adas:tracking-prediction@0.1.0;

world tracking-prediction-component {
    import wasi:cli/environment@0.2.3;
    import wasi:cli/exit@0.2.3;
    import wasi:io/streams@0.2.3;
    import wasi:cli/stdout@0.2.3;
    import wasi:cli/stderr@0.2.3;
    import wasi:clocks/monotonic-clock@0.2.3;
    import wasi:clocks/wall-clock@0.2.3;

    /// Import FEO execution control (all components need this)
    import adas:execution-control/execution-control@0.1.0;

    /// Import fusion data
    import adas:sensor-fusion/fusion-data@0.1.0;
    
    /// Import WASI-NN for prediction models
    import wasi:nn/graph@0.2.0;
    import wasi:nn/tensor@0.2.0;
    import wasi:nn/inference@0.2.0;
    
    /// Export tracking and prediction data
    export adas:prediction-data/tracking-data@0.1.0;
    
    /// Tracking control interface
    export tracking-control: interface {
        /// Initialize tracking system
        initialize: func(config: tracking-config) -> result<_, string>;
        
        /// Load prediction model
        load-model: func(model-path: string) -> result<_, string>;
        
        /// Start tracking
        start-tracking: func() -> result<_, string>;
        
        /// Stop tracking
        stop-tracking: func() -> result<_, string>;
        
        /// Update configuration
        update-config: func(config: tracking-config) -> result<_, string>;
        
        /// Get status
        get-status: func() -> tracking-status;
        
        /// Get performance metrics
        get-performance: func() -> performance-metrics;
    }

    /// Tracking configuration
    record tracking-config {
        kalman-params: kalman-parameters,
        association-params: association-parameters,
        prediction-horizon: f32, // seconds
        max-tracks: u32,
        track-management: track-management-config,
    }

    record kalman-parameters {
        process-noise: f32,
        measurement-noise: f32,
        initial-covariance: f32,
        adaptive-filtering: bool,
    }

    record association-parameters {
        distance-threshold: f32,
        velocity-threshold: f32,
        size-threshold: f32,
        gating-distance: f32,
        association-method: association-method,
    }

    enum association-method {
        nearest-neighbor,
        global-nearest-neighbor,
        joint-probabilistic,
        multiple-hypothesis,
    }

    record track-management-config {
        init-threshold: u32,      // Detections before confirmed
        delete-threshold: u32,    // Misses before deletion
        max-coast-time: f32,      // Max prediction without measurement
        min-track-confidence: f32,
    }

    enum tracking-status {
        offline,
        initializing,
        tracking,
        degraded,
        error,
    }

    record performance-metrics {
        active-tracks: u32,
        mota: f32,              // Multi-Object Tracking Accuracy
        motp: f32,              // Multi-Object Tracking Precision
        id-switches: u32,
        fragmentations: u32,
        processing-time-ms: f32,
        cpu-usage-percent: f32,
        memory-usage-mb: u32,
    }
}
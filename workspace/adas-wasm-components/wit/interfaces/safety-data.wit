/// Safety Monitor Data Interface - EXPORTED by safety monitor
package adas:safety-data@0.1.0;

interface safety-data {
    use adas:vehicle-control/vehicle-commands.{steering-command, braking-command, acceleration-command};

    record safety-status {
        overall-safety: safety-level,
        violations: list<safety-violation>,
        overrides: list<safety-override>,
        timestamp: u64,
    }

    record safety-violation {
        violation-type: violation-type,
        severity: severity-level,
        description: string,
        affected-system: adas-system,
        timestamp: u64,
    }

    record safety-override {
        override-type: override-type,
        original-command: command-type,
        safe-command: command-type,
        reason: string,
        timestamp: u64,
    }

    variant command-type {
        steering(steering-command),
        braking(braking-command),
        acceleration(acceleration-command),
    }

    enum safety-level {
        safe,
        caution,
        warning,
        critical,
        emergency,
    }

    enum violation-type {
        speed-limit-exceeded,
        unsafe-following-distance,
        lane-departure,
        collision-imminent,
        sensor-failure,
        actuator-failure,
        planning-timeout,
        invalid-trajectory,
        system-fault,
    }

    enum severity-level {
        info,
        low,
        medium,
        high,
        critical,
    }

    enum override-type {
        reduce-speed,
        emergency-brake,
        cancel-maneuver,
        limit-steering,
        safe-stop,
        system-shutdown,
    }

    enum adas-system {
        perception,
        planning,
        control,
        actuation,
        sensors,
        communication,
    }

    /// Get current safety status
    get-safety-status: func() -> result<safety-status, string>;
    
    /// Check if system is safe to operate
    is-safe: func() -> bool;
    
    /// Get safety score (0-100)
    get-safety-score: func() -> f32;
}